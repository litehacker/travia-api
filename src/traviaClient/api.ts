/* tslint:disable */
/* eslint-disable */
/**
 * Travia
 * Booking portal
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "./configuration";
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "./common";
import type { RequestArgs } from "./base";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from "./base";
import {
  BookingCartResponse,
  BookingResponse,
  BookingCancellationFeeResponse,
  PageBookingPageResponse,
  PagePropertyExtendedResponse,
  PropertyExtendedResponse,
  TravelAgentResponse,
  BookingRoomCreateRequest,
  BookingCreateRequest,
  BookingCartCreateRequest,
  BookingCartConfirmRequest,
  PropertyRatesRequest,
  PropertySearchFilterRequest,
  PropertySearchFiltersResponse,
  PropertyAvailableDatesResponse,
  PropertyRatesResponse,
  PropertySearchResponse,
  CarRentalSearchRequest,
  CarRentalSearchFiltersResponse,
  CarRentalSearchResponse,
  BookingRoomNameUpdateRequest,
  BookingUpdateRequest,
} from "./types";

/**
 * CancelABookingApi - axios parameter creator
 * @export
 */
export const CancelABookingApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * Travel agent identification number and booking cart identification number are needed as path variables.<br/>This is a method for cancelling the booking cart as a travel agent. The booking cart status must be open and the bookings must be pending so that the action can be performed, otherwise an appropriate error message will be presented. Cancelling the whole booking cart, means cancelling the bookings in it.
     * @summary Cancel a booking cart
     * @param {number} travelAgentId Travel agent identification number
     * @param {number} id Booking cart identification number
     * @param {string} [fieldsToInclude] Comma-separated list of field names to include in the response. Use dot notation for nested fields (\&#39;bookings.field1\&#39;). To include all fields from a nested object, specify the object name only (\&#39;bookings\&#39;). If not provided, all fields will be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelTravelAgentBookingCartUsingPUT: async (
      travelAgentId: number = this.configuration.travelAgentId,
      id: number,
      fieldsToInclude?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'travelAgentId' is not null or undefined
      assertParamExists(
        "cancelTravelAgentBookingCartUsingPUT",
        "travelAgentId",
        travelAgentId
      );
      // verify required parameter 'id' is not null or undefined
      assertParamExists("cancelTravelAgentBookingCartUsingPUT", "id", id);
      const localVarPath =
        `/api/external/v2/travelAgents/{travelAgentId}/bookingCarts/{id}/cancel`
          .replace(
            `{${"travelAgentId"}}`,
            encodeURIComponent(String(travelAgentId))
          )
          .replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication API KEY required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-KEY",
        configuration
      );

      if (fieldsToInclude !== undefined) {
        localVarQueryParameter["fieldsToInclude"] = fieldsToInclude;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Travel agent identification number and booking identification number are needed as path variables.<br/>This method updates the booking status to cancelled and sets the cancellation fee that needs to be paid by the travel agent. Also, the travel agent is able to write a reason for cancelling the booking that will be send as a message to the property.<br/>After the booking is cancelled, notifications are send to both property and travel agent.
     * @summary Cancel a booking
     * @param {number} travelAgentId Travel Agent identification number
     * @param {number} id Booking identification number
     * @param {string} [fieldsToInclude] Comma-separated list of field names to include in the response. Use dot notation for nested fields (\&#39;bookingRooms.field1\&#39;). To include all fields from a nested object, specify the object name only (\&#39;bookingRooms\&#39;). If not provided, all fields will be returned.
     * @param {string} [message] Option message explaining the reason for cancelling the booking
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelTravelAgentBookingUsingPUT: async (
      travelAgentId: number = this.configuration.travelAgentId,
      id: number,
      fieldsToInclude?: string,
      message?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'travelAgentId' is not null or undefined
      assertParamExists(
        "cancelTravelAgentBookingUsingPUT",
        "travelAgentId",
        travelAgentId
      );
      // verify required parameter 'id' is not null or undefined
      assertParamExists("cancelTravelAgentBookingUsingPUT", "id", id);
      const localVarPath =
        `/api/external/v2/travelAgents/{travelAgentId}/bookings/{id}/cancel`
          .replace(
            `{${"travelAgentId"}}`,
            encodeURIComponent(String(travelAgentId))
          )
          .replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication API KEY required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-KEY",
        configuration
      );

      if (fieldsToInclude !== undefined) {
        localVarQueryParameter["fieldsToInclude"] = fieldsToInclude;
      }

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        message,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Travel agent, booking and booking room identification numbers are needed as path variables.<br/>The specific room is marked as deleted from the booking made by the travel agent. The room can only be removed in case the booking is still editable.In case the booking is not related to the travel agent or if the booking is not editable, an appropriate error message will be displayed.
     * @summary Delete a booking room of a booking
     * @param {number} travelAgentId Travel agent identification number
     * @param {number} bookingId Booking identification number
     * @param {number} id Booking room identification number
     * @param {string} [fieldsToInclude] Comma-separated list of field names to include in the response. Use dot notation for nested fields (\&#39;bookingRooms.field1\&#39;). To include all fields from a nested object, specify the object name only (\&#39;bookingRooms\&#39;). If not provided, all fields will be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTravelAgentBookingRoomUsingDELETE: async (
      travelAgentId: number = this.configuration.travelAgentId,
      bookingId: number,
      id: number,
      fieldsToInclude?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'travelAgentId' is not null or undefined
      assertParamExists(
        "deleteTravelAgentBookingRoomUsingDELETE",
        "travelAgentId",
        travelAgentId
      );
      // verify required parameter 'bookingId' is not null or undefined
      assertParamExists(
        "deleteTravelAgentBookingRoomUsingDELETE",
        "bookingId",
        bookingId
      );
      // verify required parameter 'id' is not null or undefined
      assertParamExists("deleteTravelAgentBookingRoomUsingDELETE", "id", id);
      const localVarPath =
        `/api/external/v2/travelAgents/{travelAgentId}/bookings/{bookingId}/bookingRoom/{id}`
          .replace(
            `{${"travelAgentId"}}`,
            encodeURIComponent(String(travelAgentId))
          )
          .replace(`{${"bookingId"}}`, encodeURIComponent(String(bookingId)))
          .replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication API KEY required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-KEY",
        configuration
      );

      if (fieldsToInclude !== undefined) {
        localVarQueryParameter["fieldsToInclude"] = fieldsToInclude;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Travel agent identification number and booking identification number are needed as path variables.<br/>When cancelling a booking, a cancellation fee is calculated for each room only if a cancellation policy is specified in the cooperation between the property and the travel agent.This method sets the cancellation fee that needs to be paid for the cancelled booking.
     * @summary Get a cancellation fee for a booking
     * @param {number} travelAgentId Travel Agent identification number
     * @param {number} id Booking identification number
     * @param {number} [bookingRoomId] Booking Room identification number
     * @param {string} [fieldsToInclude] Comma-separated list of field names to include in the response. Use dot notation for nested fields (\&#39;bookingRoomCancellationPolicyLines.field1\&#39;). To include all fields from a nested object, specify the object name only (\&#39;bookingRoomCancellationPolicyLines\&#39;). If not provided, all fields will be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTravelAgentBookingCancellationFeeUsingGET: async (
      travelAgentId: number = this.configuration.travelAgentId,
      id: number,
      bookingRoomId?: number,
      fieldsToInclude?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'travelAgentId' is not null or undefined
      assertParamExists(
        "getTravelAgentBookingCancellationFeeUsingGET",
        "travelAgentId",
        travelAgentId
      );
      // verify required parameter 'id' is not null or undefined
      assertParamExists(
        "getTravelAgentBookingCancellationFeeUsingGET",
        "id",
        id
      );
      const localVarPath =
        `/api/external/v2/travelAgents/{travelAgentId}/bookings/{id}/cancellationFee`
          .replace(
            `{${"travelAgentId"}}`,
            encodeURIComponent(String(travelAgentId))
          )
          .replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication API KEY required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-KEY",
        configuration
      );

      if (bookingRoomId !== undefined) {
        localVarQueryParameter["bookingRoomId"] = bookingRoomId;
      }

      if (fieldsToInclude !== undefined) {
        localVarQueryParameter["fieldsToInclude"] = fieldsToInclude;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * CancelABookingApi - functional programming interface
 * @export
 */
export const CancelABookingApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    CancelABookingApiAxiosParamCreator(configuration);
  return {
    /**
     * Travel agent identification number and booking cart identification number are needed as path variables.<br/>This is a method for cancelling the booking cart as a travel agent. The booking cart status must be open and the bookings must be pending so that the action can be performed, otherwise an appropriate error message will be presented. Cancelling the whole booking cart, means cancelling the bookings in it.
     * @summary Cancel a booking cart
     * @param {number} travelAgentId Travel agent identification number
     * @param {number} id Booking cart identification number
     * @param {string} [fieldsToInclude] Comma-separated list of field names to include in the response. Use dot notation for nested fields (\&#39;bookings.field1\&#39;). To include all fields from a nested object, specify the object name only (\&#39;bookings\&#39;). If not provided, all fields will be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async cancelTravelAgentBookingCartUsingPUT(
      travelAgentId: number = this.configuration.travelAgentId,
      id: number,
      fieldsToInclude?: string,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<BookingCartResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.cancelTravelAgentBookingCartUsingPUT(
          travelAgentId,
          id,
          fieldsToInclude,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "CancelABookingApi.cancelTravelAgentBookingCartUsingPUT"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Travel agent identification number and booking identification number are needed as path variables.<br/>This method updates the booking status to cancelled and sets the cancellation fee that needs to be paid by the travel agent. Also, the travel agent is able to write a reason for cancelling the booking that will be send as a message to the property.<br/>After the booking is cancelled, notifications are send to both property and travel agent.
     * @summary Cancel a booking
     * @param {number} travelAgentId Travel Agent identification number
     * @param {number} id Booking identification number
     * @param {string} [fieldsToInclude] Comma-separated list of field names to include in the response. Use dot notation for nested fields (\&#39;bookingRooms.field1\&#39;). To include all fields from a nested object, specify the object name only (\&#39;bookingRooms\&#39;). If not provided, all fields will be returned.
     * @param {string} [message] Option message explaining the reason for cancelling the booking
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async cancelTravelAgentBookingUsingPUT(
      travelAgentId: number = this.configuration.travelAgentId,
      id: number,
      fieldsToInclude?: string,
      message?: string,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<BookingResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.cancelTravelAgentBookingUsingPUT(
          travelAgentId,
          id,
          fieldsToInclude,
          message,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "CancelABookingApi.cancelTravelAgentBookingUsingPUT"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Travel agent, booking and booking room identification numbers are needed as path variables.<br/>The specific room is marked as deleted from the booking made by the travel agent. The room can only be removed in case the booking is still editable.In case the booking is not related to the travel agent or if the booking is not editable, an appropriate error message will be displayed.
     * @summary Delete a booking room of a booking
     * @param {number} travelAgentId Travel agent identification number
     * @param {number} bookingId Booking identification number
     * @param {number} id Booking room identification number
     * @param {string} [fieldsToInclude] Comma-separated list of field names to include in the response. Use dot notation for nested fields (\&#39;bookingRooms.field1\&#39;). To include all fields from a nested object, specify the object name only (\&#39;bookingRooms\&#39;). If not provided, all fields will be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteTravelAgentBookingRoomUsingDELETE(
      travelAgentId: number = this.configuration.travelAgentId,
      bookingId: number,
      id: number,
      fieldsToInclude?: string,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<BookingResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteTravelAgentBookingRoomUsingDELETE(
          travelAgentId,
          bookingId,
          id,
          fieldsToInclude,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "CancelABookingApi.deleteTravelAgentBookingRoomUsingDELETE"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Travel agent identification number and booking identification number are needed as path variables.<br/>When cancelling a booking, a cancellation fee is calculated for each room only if a cancellation policy is specified in the cooperation between the property and the travel agent.This method sets the cancellation fee that needs to be paid for the cancelled booking.
     * @summary Get a cancellation fee for a booking
     * @param {number} travelAgentId Travel Agent identification number
     * @param {number} id Booking identification number
     * @param {number} [bookingRoomId] Booking Room identification number
     * @param {string} [fieldsToInclude] Comma-separated list of field names to include in the response. Use dot notation for nested fields (\&#39;bookingRoomCancellationPolicyLines.field1\&#39;). To include all fields from a nested object, specify the object name only (\&#39;bookingRoomCancellationPolicyLines\&#39;). If not provided, all fields will be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getTravelAgentBookingCancellationFeeUsingGET(
      travelAgentId: number = this.configuration.travelAgentId,
      id: number,
      bookingRoomId?: number,
      fieldsToInclude?: string,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<BookingCancellationFeeResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getTravelAgentBookingCancellationFeeUsingGET(
          travelAgentId,
          id,
          bookingRoomId,
          fieldsToInclude,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "CancelABookingApi.getTravelAgentBookingCancellationFeeUsingGET"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * CancelABookingApi - factory interface
 * @export
 */
export const CancelABookingApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = CancelABookingApiFp(configuration);
  return {
    /**
     * Travel agent identification number and booking cart identification number are needed as path variables.<br/>This is a method for cancelling the booking cart as a travel agent. The booking cart status must be open and the bookings must be pending so that the action can be performed, otherwise an appropriate error message will be presented. Cancelling the whole booking cart, means cancelling the bookings in it.
     * @summary Cancel a booking cart
     * @param {number} travelAgentId Travel agent identification number
     * @param {number} id Booking cart identification number
     * @param {string} [fieldsToInclude] Comma-separated list of field names to include in the response. Use dot notation for nested fields (\&#39;bookings.field1\&#39;). To include all fields from a nested object, specify the object name only (\&#39;bookings\&#39;). If not provided, all fields will be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelTravelAgentBookingCartUsingPUT(
      travelAgentId: number = this.configuration.travelAgentId,
      id: number,
      fieldsToInclude?: string,
      options?: any
    ): AxiosPromise<BookingCartResponse> {
      return localVarFp
        .cancelTravelAgentBookingCartUsingPUT(
          travelAgentId,
          id,
          fieldsToInclude,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * Travel agent identification number and booking identification number are needed as path variables.<br/>This method updates the booking status to cancelled and sets the cancellation fee that needs to be paid by the travel agent. Also, the travel agent is able to write a reason for cancelling the booking that will be send as a message to the property.<br/>After the booking is cancelled, notifications are send to both property and travel agent.
     * @summary Cancel a booking
     * @param {number} travelAgentId Travel Agent identification number
     * @param {number} id Booking identification number
     * @param {string} [fieldsToInclude] Comma-separated list of field names to include in the response. Use dot notation for nested fields (\&#39;bookingRooms.field1\&#39;). To include all fields from a nested object, specify the object name only (\&#39;bookingRooms\&#39;). If not provided, all fields will be returned.
     * @param {string} [message] Option message explaining the reason for cancelling the booking
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelTravelAgentBookingUsingPUT(
      travelAgentId: number = this.configuration.travelAgentId,
      id: number,
      fieldsToInclude?: string,
      message?: string,
      options?: any
    ): AxiosPromise<BookingResponse> {
      return localVarFp
        .cancelTravelAgentBookingUsingPUT(
          travelAgentId,
          id,
          fieldsToInclude,
          message,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * Travel agent, booking and booking room identification numbers are needed as path variables.<br/>The specific room is marked as deleted from the booking made by the travel agent. The room can only be removed in case the booking is still editable.In case the booking is not related to the travel agent or if the booking is not editable, an appropriate error message will be displayed.
     * @summary Delete a booking room of a booking
     * @param {number} travelAgentId Travel agent identification number
     * @param {number} bookingId Booking identification number
     * @param {number} id Booking room identification number
     * @param {string} [fieldsToInclude] Comma-separated list of field names to include in the response. Use dot notation for nested fields (\&#39;bookingRooms.field1\&#39;). To include all fields from a nested object, specify the object name only (\&#39;bookingRooms\&#39;). If not provided, all fields will be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTravelAgentBookingRoomUsingDELETE(
      travelAgentId: number = this.configuration.travelAgentId,
      bookingId: number,
      id: number,
      fieldsToInclude?: string,
      options?: any
    ): AxiosPromise<BookingResponse> {
      return localVarFp
        .deleteTravelAgentBookingRoomUsingDELETE(
          travelAgentId,
          bookingId,
          id,
          fieldsToInclude,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * Travel agent identification number and booking identification number are needed as path variables.<br/>When cancelling a booking, a cancellation fee is calculated for each room only if a cancellation policy is specified in the cooperation between the property and the travel agent.This method sets the cancellation fee that needs to be paid for the cancelled booking.
     * @summary Get a cancellation fee for a booking
     * @param {number} travelAgentId Travel Agent identification number
     * @param {number} id Booking identification number
     * @param {number} [bookingRoomId] Booking Room identification number
     * @param {string} [fieldsToInclude] Comma-separated list of field names to include in the response. Use dot notation for nested fields (\&#39;bookingRoomCancellationPolicyLines.field1\&#39;). To include all fields from a nested object, specify the object name only (\&#39;bookingRoomCancellationPolicyLines\&#39;). If not provided, all fields will be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTravelAgentBookingCancellationFeeUsingGET(
      travelAgentId: number = this.configuration.travelAgentId,
      id: number,
      bookingRoomId?: number,
      fieldsToInclude?: string,
      options?: any
    ): AxiosPromise<BookingCancellationFeeResponse> {
      return localVarFp
        .getTravelAgentBookingCancellationFeeUsingGET(
          travelAgentId,
          id,
          bookingRoomId,
          fieldsToInclude,
          options
        )
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * CancelABookingApi - object-oriented interface
 * @export
 * @class CancelABookingApi
 * @extends {BaseAPI}
 */
export class CancelABookingApi extends BaseAPI {
  /**
   * Travel agent identification number and booking cart identification number are needed as path variables.<br/>This is a method for cancelling the booking cart as a travel agent. The booking cart status must be open and the bookings must be pending so that the action can be performed, otherwise an appropriate error message will be presented. Cancelling the whole booking cart, means cancelling the bookings in it.
   * @summary Cancel a booking cart
   * @param {number} travelAgentId Travel agent identification number
   * @param {number} id Booking cart identification number
   * @param {string} [fieldsToInclude] Comma-separated list of field names to include in the response. Use dot notation for nested fields (\&#39;bookings.field1\&#39;). To include all fields from a nested object, specify the object name only (\&#39;bookings\&#39;). If not provided, all fields will be returned.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CancelABookingApi
   */
  public cancelTravelAgentBookingCartUsingPUT(
    id: number,
    fieldsToInclude?: string,
    options?: RawAxiosRequestConfig
  ) {
    return CancelABookingApiFp(this.configuration)
      .cancelTravelAgentBookingCartUsingPUT(
        this.configuration.travelAgentId,
        id,
        fieldsToInclude,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Travel agent identification number and booking identification number are needed as path variables.<br/>This method updates the booking status to cancelled and sets the cancellation fee that needs to be paid by the travel agent. Also, the travel agent is able to write a reason for cancelling the booking that will be send as a message to the property.<br/>After the booking is cancelled, notifications are send to both property and travel agent.
   * @summary Cancel a booking
   * @param {number} travelAgentId Travel Agent identification number
   * @param {number} id Booking identification number
   * @param {string} [fieldsToInclude] Comma-separated list of field names to include in the response. Use dot notation for nested fields (\&#39;bookingRooms.field1\&#39;). To include all fields from a nested object, specify the object name only (\&#39;bookingRooms\&#39;). If not provided, all fields will be returned.
   * @param {string} [message] Option message explaining the reason for cancelling the booking
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CancelABookingApi
   */
  public cancelTravelAgentBookingUsingPUT(
    id: number,
    fieldsToInclude?: string,
    message?: string,
    options?: RawAxiosRequestConfig
  ) {
    return CancelABookingApiFp(this.configuration)
      .cancelTravelAgentBookingUsingPUT(
        this.configuration.travelAgentId,
        id,
        fieldsToInclude,
        message,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Travel agent, booking and booking room identification numbers are needed as path variables.<br/>The specific room is marked as deleted from the booking made by the travel agent. The room can only be removed in case the booking is still editable.In case the booking is not related to the travel agent or if the booking is not editable, an appropriate error message will be displayed.
   * @summary Delete a booking room of a booking
   * @param {number} travelAgentId Travel agent identification number
   * @param {number} bookingId Booking identification number
   * @param {number} id Booking room identification number
   * @param {string} [fieldsToInclude] Comma-separated list of field names to include in the response. Use dot notation for nested fields (\&#39;bookingRooms.field1\&#39;). To include all fields from a nested object, specify the object name only (\&#39;bookingRooms\&#39;). If not provided, all fields will be returned.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CancelABookingApi
   */
  public deleteTravelAgentBookingRoomUsingDELETE(
    bookingId: number,
    id: number,
    fieldsToInclude?: string,
    options?: RawAxiosRequestConfig
  ) {
    return CancelABookingApiFp(this.configuration)
      .deleteTravelAgentBookingRoomUsingDELETE(
        this.configuration.travelAgentId,
        bookingId,
        id,
        fieldsToInclude,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Travel agent identification number and booking identification number are needed as path variables.<br/>When cancelling a booking, a cancellation fee is calculated for each room only if a cancellation policy is specified in the cooperation between the property and the travel agent.This method sets the cancellation fee that needs to be paid for the cancelled booking.
   * @summary Get a cancellation fee for a booking
   * @param {number} travelAgentId Travel Agent identification number
   * @param {number} id Booking identification number
   * @param {number} [bookingRoomId] Booking Room identification number
   * @param {string} [fieldsToInclude] Comma-separated list of field names to include in the response. Use dot notation for nested fields (\&#39;bookingRoomCancellationPolicyLines.field1\&#39;). To include all fields from a nested object, specify the object name only (\&#39;bookingRoomCancellationPolicyLines\&#39;). If not provided, all fields will be returned.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CancelABookingApi
   */
  public getTravelAgentBookingCancellationFeeUsingGET(
    id: number,
    bookingRoomId?: number,
    fieldsToInclude?: string,
    options?: RawAxiosRequestConfig
  ) {
    return CancelABookingApiFp(this.configuration)
      .getTravelAgentBookingCancellationFeeUsingGET(
        this.configuration.travelAgentId,
        id,
        bookingRoomId,
        fieldsToInclude,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * GetABookingApi - axios parameter creator
 * @export
 */
export const GetABookingApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * Travel agent identification number is needed as a path variable.</br>This method gets the booking cart for a specific travel agent on which he is currently working. The user accessing the booking cart should be employee of the travel agency and the booking cart should have status \'Open\'.
     * @summary Get the current booking cart
     * @param {number} travelAgentId Travel agent identification number
     * @param {string} [fieldsToInclude] Comma-separated list of field names to include in the response. Use dot notation for nested fields (\&#39;bookings.field1\&#39;). To include all fields from a nested object, specify the object name only (\&#39;bookings\&#39;). If not provided, all fields will be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTravelAgentBookingCartUsingGET2: async (
      travelAgentId: number = this.configuration.travelAgentId,
      fieldsToInclude?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'travelAgentId' is not null or undefined
      assertParamExists(
        "getTravelAgentBookingCartUsingGET2",
        "travelAgentId",
        this.configuration.travelAgentId
      );
      const localVarPath =
        `/api/external/v2/travelAgents/{travelAgentId}/bookingCart`.replace(
          `{${"travelAgentId"}}`,
          encodeURIComponent(String(process.env.TRAVIA_TRAVEL_AGENT_ID))
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication API KEY required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-KEY",
        configuration
      );

      if (fieldsToInclude !== undefined) {
        localVarQueryParameter["fieldsToInclude"] = fieldsToInclude;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Travel agent identification number and booking cart identification number are needed as path variables.</br>This method returns the information related to the specific booking cart for a travel agent, such as status, dates, rooms, currency, prices, notification etc.</br>The user that requests these information must be an employee in the travel agency in order to access the booking cart.
     * @summary Get a booking cart
     * @param {number} id Booking Cart identification number
     * @param {string} [fieldsToInclude] Comma-separated list of field names to include in the response. Use dot notation for nested fields (\&#39;bookings.field1\&#39;). To include all fields from a nested object, specify the object name only (\&#39;bookings\&#39;). If not provided, all fields will be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTravelAgentBookingCartUsingGET3: async (
      id: number,
      fieldsToInclude?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'travelAgentId' is not null or undefined
      assertParamExists(
        "getTravelAgentBookingCartUsingGET3",
        "travelAgentId",
        this.configuration.travelAgentId
      );
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getTravelAgentBookingCartUsingGET3", "id", id);
      const localVarPath =
        `/api/external/v2/travelAgents/{travelAgentId}/bookingCarts/{id}`
          .replace(
            `{${"travelAgentId"}}`,
            encodeURIComponent(String(process.env.TRAVIA_TRAVEL_AGENT_ID))
          )
          .replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication API KEY required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-KEY",
        configuration
      );

      if (fieldsToInclude !== undefined) {
        localVarQueryParameter["fieldsToInclude"] = fieldsToInclude;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Travel agent identification number and booking identification number are needed as path variables.<br/>This method returns a specific booking that the travel agency has made in the Travia system. In case the booking can\'t be found in a booking cart or is not related to the travel agency, then an appropriate error message is presented.
     * @summary Get a booking
     * @param {number} travelAgentId Travel Agent identification number
     * @param {number} id Booking identification number
     * @param {string} [fieldsToInclude] Comma-separated list of field names to include in the response. Use dot notation for nested fields (\&#39;bookingRooms.field1\&#39;). To include all fields from a nested object, specify the object name only (\&#39;bookingRooms\&#39;). If not provided, all fields will be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTravelAgentBookingUsingGET: async (
      travelAgentId: number = this.configuration.travelAgentId,
      id: number,
      fieldsToInclude?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'travelAgentId' is not null or undefined
      assertParamExists(
        "getTravelAgentBookingUsingGET",
        "travelAgentId",
        travelAgentId
      );
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getTravelAgentBookingUsingGET", "id", id);
      const localVarPath =
        `/api/external/v2/travelAgents/{travelAgentId}/bookings/{id}`
          .replace(
            `{${"travelAgentId"}}`,
            encodeURIComponent(String(travelAgentId))
          )
          .replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication API KEY required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-KEY",
        configuration
      );

      if (fieldsToInclude !== undefined) {
        localVarQueryParameter["fieldsToInclude"] = fieldsToInclude;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * This method returns the page for bookings made for the travel agent. On the page are displayed all of the bookings made for the travel agents and for which the user has access. The travel agent bookings can be searched by a specific keyword like booking identification number, the status of the booking, the property for which the booking is made,the travel agent that made the booking or the reservation dates. The results are displayed with some general information about the bookings.
     * @summary Get a page of bookings
     * @param {string} [keyword] Referring to booking name
     * @param {string} [travelAgent] Travel Agent identifiers separated with \&#39;,\&#39;
     * @param {string} [property] Property identifiers separated with \&#39;,\&#39;
     * @param {string} [status] Booking status identifiers separated with \&#39;,\&#39;
     * @param {string} [start] Booking start date
     * @param {string} [end] Booking end date
     * @param {number} [allotmentId] Allotment identifier
     * @param {number} [allotmentCampaignId] Allotment Campaign identifier
     * @param {string} [bookingType] Booking Type identifiers separated with \&#39;,\&#39;
     * @param {string} [subCooperationsBookings] Display only sub-cooperation bookings
     * @param {string} [fieldsToInclude] Comma-separated list of field names to include in the response. If not provided, all fields will be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTravelAgentBookingsPageUsingGET: async (
      keyword?: string,
      travelAgent?: string,
      property?: string,
      status?: string,
      start?: string,
      end?: string,
      allotmentId?: number,
      allotmentCampaignId?: number,
      bookingType?: string,
      subCooperationsBookings?: string,
      fieldsToInclude?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/external/v2/travelAgents/bookings/page`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication API KEY required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-KEY",
        configuration
      );

      if (keyword !== undefined) {
        localVarQueryParameter["keyword"] = keyword;
      }

      if (travelAgent !== undefined) {
        localVarQueryParameter["travelAgent"] = travelAgent;
      }

      if (property !== undefined) {
        localVarQueryParameter["property"] = property;
      }

      if (status !== undefined) {
        localVarQueryParameter["status"] = status;
      }

      if (start !== undefined) {
        localVarQueryParameter["start"] = start;
      }

      if (end !== undefined) {
        localVarQueryParameter["end"] = end;
      }

      if (allotmentId !== undefined) {
        localVarQueryParameter["allotmentId"] = allotmentId;
      }

      if (allotmentCampaignId !== undefined) {
        localVarQueryParameter["allotmentCampaignId"] = allotmentCampaignId;
      }

      if (bookingType !== undefined) {
        localVarQueryParameter["bookingType"] = bookingType;
      }

      if (subCooperationsBookings !== undefined) {
        localVarQueryParameter["subCooperationsBookings"] =
          subCooperationsBookings;
      }

      if (fieldsToInclude !== undefined) {
        localVarQueryParameter["fieldsToInclude"] = fieldsToInclude;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * GetABookingApi - functional programming interface
 * @export
 */
export const GetABookingApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    GetABookingApiAxiosParamCreator(configuration);
  return {
    /**
     * Travel agent identification number is needed as a path variable.</br>This method gets the booking cart for a specific travel agent on which he is currently working. The user accessing the booking cart should be employee of the travel agency and the booking cart should have status \'Open\'.
     * @summary Get the current booking cart
     * @param {number} travelAgentId Travel agent identification number
     * @param {string} [fieldsToInclude] Comma-separated list of field names to include in the response. Use dot notation for nested fields (\&#39;bookings.field1\&#39;). To include all fields from a nested object, specify the object name only (\&#39;bookings\&#39;). If not provided, all fields will be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getTravelAgentBookingCartUsingGET2(
      travelAgentId: number = this.configuration.travelAgentId,
      fieldsToInclude?: string,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<BookingCartResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getTravelAgentBookingCartUsingGET2(
          travelAgentId,
          fieldsToInclude,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "GetABookingApi.getTravelAgentBookingCartUsingGET2"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Travel agent identification number and booking cart identification number are needed as path variables.</br>This method returns the information related to the specific booking cart for a travel agent, such as status, dates, rooms, currency, prices, notification etc.</br>The user that requests these information must be an employee in the travel agency in order to access the booking cart.
     * @summary Get a booking cart
     * @param {number} travelAgentId Travel Agent identification number
     * @param {number} id Booking Cart identification number
     * @param {string} [fieldsToInclude] Comma-separated list of field names to include in the response. Use dot notation for nested fields (\&#39;bookings.field1\&#39;). To include all fields from a nested object, specify the object name only (\&#39;bookings\&#39;). If not provided, all fields will be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getTravelAgentBookingCartUsingGET3(
      id: number,
      fieldsToInclude?: string,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<BookingCartResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getTravelAgentBookingCartUsingGET3(
          id,
          fieldsToInclude,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "GetABookingApi.getTravelAgentBookingCartUsingGET3"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Travel agent identification number and booking identification number are needed as path variables.<br/>This method returns a specific booking that the travel agency has made in the Travia system. In case the booking can\'t be found in a booking cart or is not related to the travel agency, then an appropriate error message is presented.
     * @summary Get a booking
     * @param {number} travelAgentId Travel Agent identification number
     * @param {number} id Booking identification number
     * @param {string} [fieldsToInclude] Comma-separated list of field names to include in the response. Use dot notation for nested fields (\&#39;bookingRooms.field1\&#39;). To include all fields from a nested object, specify the object name only (\&#39;bookingRooms\&#39;). If not provided, all fields will be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getTravelAgentBookingUsingGET(
      travelAgentId: number = this.configuration.travelAgentId,
      id: number,
      fieldsToInclude?: string,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<BookingResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getTravelAgentBookingUsingGET(
          travelAgentId,
          id,
          fieldsToInclude,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["GetABookingApi.getTravelAgentBookingUsingGET"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * This method returns the page for bookings made for the travel agent. On the page are displayed all of the bookings made for the travel agents and for which the user has access. The travel agent bookings can be searched by a specific keyword like booking identification number, the status of the booking, the property for which the booking is made,the travel agent that made the booking or the reservation dates. The results are displayed with some general information about the bookings.
     * @summary Get a page of bookings
     * @param {string} [keyword] Referring to booking name
     * @param {string} [travelAgent] Travel Agent identifiers separated with \&#39;,\&#39;
     * @param {string} [property] Property identifiers separated with \&#39;,\&#39;
     * @param {string} [status] Booking status identifiers separated with \&#39;,\&#39;
     * @param {string} [start] Booking start date
     * @param {string} [end] Booking end date
     * @param {number} [allotmentId] Allotment identifier
     * @param {number} [allotmentCampaignId] Allotment Campaign identifier
     * @param {string} [bookingType] Booking Type identifiers separated with \&#39;,\&#39;
     * @param {string} [subCooperationsBookings] Display only sub-cooperation bookings
     * @param {string} [fieldsToInclude] Comma-separated list of field names to include in the response. If not provided, all fields will be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getTravelAgentBookingsPageUsingGET(
      keyword?: string,
      travelAgent?: string,
      property?: string,
      status?: string,
      start?: string,
      end?: string,
      allotmentId?: number,
      allotmentCampaignId?: number,
      bookingType?: string,
      subCooperationsBookings?: string,
      fieldsToInclude?: string,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<PageBookingPageResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getTravelAgentBookingsPageUsingGET(
          keyword,
          travelAgent,
          property,
          status,
          start,
          end,
          allotmentId,
          allotmentCampaignId,
          bookingType,
          subCooperationsBookings,
          fieldsToInclude,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "GetABookingApi.getTravelAgentBookingsPageUsingGET"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * GetABookingApi - factory interface
 * @export
 */
export const GetABookingApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = GetABookingApiFp(configuration);
  return {
    /**
     * Travel agent identification number is needed as a path variable.</br>This method gets the booking cart for a specific travel agent on which he is currently working. The user accessing the booking cart should be employee of the travel agency and the booking cart should have status \'Open\'.
     * @summary Get the current booking cart
     * @param {number} travelAgentId Travel agent identification number
     * @param {string} [fieldsToInclude] Comma-separated list of field names to include in the response. Use dot notation for nested fields (\&#39;bookings.field1\&#39;). To include all fields from a nested object, specify the object name only (\&#39;bookings\&#39;). If not provided, all fields will be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTravelAgentBookingCartUsingGET2(
      travelAgentId: number = this.configuration.travelAgentId,
      fieldsToInclude?: string,
      options?: any
    ): AxiosPromise<BookingCartResponse> {
      return localVarFp
        .getTravelAgentBookingCartUsingGET2(
          travelAgentId,
          fieldsToInclude,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * Travel agent identification number and booking cart identification number are needed as path variables.</br>This method returns the information related to the specific booking cart for a travel agent, such as status, dates, rooms, currency, prices, notification etc.</br>The user that requests these information must be an employee in the travel agency in order to access the booking cart.
     * @summary Get a booking cart
     * @param {number} travelAgentId Travel Agent identification number
     * @param {number} id Booking Cart identification number
     * @param {string} [fieldsToInclude] Comma-separated list of field names to include in the response. Use dot notation for nested fields (\&#39;bookings.field1\&#39;). To include all fields from a nested object, specify the object name only (\&#39;bookings\&#39;). If not provided, all fields will be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTravelAgentBookingCartUsingGET3(
      id: number,
      fieldsToInclude?: string,
      options?: any
    ): AxiosPromise<BookingCartResponse> {
      return localVarFp
        .getTravelAgentBookingCartUsingGET3(id, fieldsToInclude, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Travel agent identification number and booking identification number are needed as path variables.<br/>This method returns a specific booking that the travel agency has made in the Travia system. In case the booking can\'t be found in a booking cart or is not related to the travel agency, then an appropriate error message is presented.
     * @summary Get a booking
     * @param {number} travelAgentId Travel Agent identification number
     * @param {number} id Booking identification number
     * @param {string} [fieldsToInclude] Comma-separated list of field names to include in the response. Use dot notation for nested fields (\&#39;bookingRooms.field1\&#39;). To include all fields from a nested object, specify the object name only (\&#39;bookingRooms\&#39;). If not provided, all fields will be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTravelAgentBookingUsingGET(
      travelAgentId: number = this.configuration.travelAgentId,
      id: number,
      fieldsToInclude?: string,
      options?: any
    ): AxiosPromise<BookingResponse> {
      return localVarFp
        .getTravelAgentBookingUsingGET(
          travelAgentId,
          id,
          fieldsToInclude,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * This method returns the page for bookings made for the travel agent. On the page are displayed all of the bookings made for the travel agents and for which the user has access. The travel agent bookings can be searched by a specific keyword like booking identification number, the status of the booking, the property for which the booking is made,the travel agent that made the booking or the reservation dates. The results are displayed with some general information about the bookings.
     * @summary Get a page of bookings
     * @param {string} [keyword] Referring to booking name
     * @param {string} [travelAgent] Travel Agent identifiers separated with \&#39;,\&#39;
     * @param {string} [property] Property identifiers separated with \&#39;,\&#39;
     * @param {string} [status] Booking status identifiers separated with \&#39;,\&#39;
     * @param {string} [start] Booking start date
     * @param {string} [end] Booking end date
     * @param {number} [allotmentId] Allotment identifier
     * @param {number} [allotmentCampaignId] Allotment Campaign identifier
     * @param {string} [bookingType] Booking Type identifiers separated with \&#39;,\&#39;
     * @param {string} [subCooperationsBookings] Display only sub-cooperation bookings
     * @param {string} [fieldsToInclude] Comma-separated list of field names to include in the response. If not provided, all fields will be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTravelAgentBookingsPageUsingGET(
      keyword?: string,
      travelAgent?: string,
      property?: string,
      status?: string,
      start?: string,
      end?: string,
      allotmentId?: number,
      allotmentCampaignId?: number,
      bookingType?: string,
      subCooperationsBookings?: string,
      fieldsToInclude?: string,
      options?: any
    ): AxiosPromise<PageBookingPageResponse> {
      return localVarFp
        .getTravelAgentBookingsPageUsingGET(
          keyword,
          travelAgent,
          property,
          status,
          start,
          end,
          allotmentId,
          allotmentCampaignId,
          bookingType,
          subCooperationsBookings,
          fieldsToInclude,
          options
        )
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * GetABookingApi - object-oriented interface
 * @export
 * @class GetABookingApi
 * @extends {BaseAPI}
 */
export class GetABookingApi extends BaseAPI {
  /**
   * Travel agent identification number is needed as a path variable.</br>This method gets the booking cart for a specific travel agent on which he is currently working. The user accessing the booking cart should be employee of the travel agency and the booking cart should have status \'Open\'.
   * @summary Get the current booking cart
   * @param {number} travelAgentId Travel agent identification number
   * @param {string} [fieldsToInclude] Comma-separated list of field names to include in the response. Use dot notation for nested fields (\&#39;bookings.field1\&#39;). To include all fields from a nested object, specify the object name only (\&#39;bookings\&#39;). If not provided, all fields will be returned.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GetABookingApi
   */
  public getTravelAgentBookingCartUsingGET2(
    fieldsToInclude?: string,
    options?: RawAxiosRequestConfig
  ) {
    return GetABookingApiFp(this.configuration)
      .getTravelAgentBookingCartUsingGET2(
        this.configuration.travelAgentId,
        fieldsToInclude,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Travel agent identification number and booking cart identification number are needed as path variables.</br>This method returns the information related to the specific booking cart for a travel agent, such as status, dates, rooms, currency, prices, notification etc.</br>The user that requests these information must be an employee in the travel agency in order to access the booking cart.
   * @summary Get a booking cart
   * @param {number} travelAgentId Travel Agent identification number
   * @param {number} id Booking Cart identification number
   * @param {string} [fieldsToInclude] Comma-separated list of field names to include in the response. Use dot notation for nested fields (\&#39;bookings.field1\&#39;). To include all fields from a nested object, specify the object name only (\&#39;bookings\&#39;). If not provided, all fields will be returned.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GetABookingApi
   */
  public getTravelAgentBookingCartUsingGET3(
    id: number,
    fieldsToInclude?: string,
    options?: RawAxiosRequestConfig
  ) {
    return GetABookingApiFp(this.configuration)
      .getTravelAgentBookingCartUsingGET3(id, fieldsToInclude, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Travel agent identification number and booking identification number are needed as path variables.<br/>This method returns a specific booking that the travel agency has made in the Travia system. In case the booking can\'t be found in a booking cart or is not related to the travel agency, then an appropriate error message is presented.
   * @summary Get a booking
   * @param {number} travelAgentId Travel Agent identification number
   * @param {number} id Booking identification number
   * @param {string} [fieldsToInclude] Comma-separated list of field names to include in the response. Use dot notation for nested fields (\&#39;bookingRooms.field1\&#39;). To include all fields from a nested object, specify the object name only (\&#39;bookingRooms\&#39;). If not provided, all fields will be returned.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GetABookingApi
   */
  public getTravelAgentBookingUsingGET(
    travelAgentId: number = this.configuration.travelAgentId,
    id: number,
    fieldsToInclude?: string,
    options?: RawAxiosRequestConfig
  ) {
    return GetABookingApiFp(this.configuration)
      .getTravelAgentBookingUsingGET(
        travelAgentId,
        id,
        fieldsToInclude,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * This method returns the page for bookings made for the travel agent. On the page are displayed all of the bookings made for the travel agents and for which the user has access. The travel agent bookings can be searched by a specific keyword like booking identification number, the status of the booking, the property for which the booking is made,the travel agent that made the booking or the reservation dates. The results are displayed with some general information about the bookings.
   * @summary Get a page of bookings
   * @param {string} [keyword] Referring to booking name
   * @param {string} [travelAgent] Travel Agent identifiers separated with \&#39;,\&#39;
   * @param {string} [property] Property identifiers separated with \&#39;,\&#39;
   * @param {string} [status] Booking status identifiers separated with \&#39;,\&#39;
   * @param {string} [start] Booking start date
   * @param {string} [end] Booking end date
   * @param {number} [allotmentId] Allotment identifier
   * @param {number} [allotmentCampaignId] Allotment Campaign identifier
   * @param {string} [bookingType] Booking Type identifiers separated with \&#39;,\&#39;
   * @param {string} [subCooperationsBookings] Display only sub-cooperation bookings
   * @param {string} [fieldsToInclude] Comma-separated list of field names to include in the response. If not provided, all fields will be returned.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GetABookingApi
   */
  public getTravelAgentBookingsPageUsingGET(
    keyword?: string,
    travelAgent?: string,
    property?: string,
    status?: string,
    start?: string,
    end?: string,
    allotmentId?: number,
    allotmentCampaignId?: number,
    bookingType?: string,
    subCooperationsBookings?: string,
    fieldsToInclude?: string,
    options?: RawAxiosRequestConfig
  ) {
    return GetABookingApiFp(this.configuration)
      .getTravelAgentBookingsPageUsingGET(
        keyword,
        travelAgent,
        property,
        status,
        start,
        end,
        allotmentId,
        allotmentCampaignId,
        bookingType,
        subCooperationsBookings,
        fieldsToInclude,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * GetPropertyContentApi - axios parameter creator
 * @export
 */
export const GetPropertyContentApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * Retrieves a paginated list of properties for a specified travel agent, with optional filtering on specific fields. By default, all property details are returned, but the \'fieldsToInclude\' parameter allows you to specify a subset of fields if all information is not needed.
     * @summary NEW - Get Properties Page
     * @param {number} travelAgentId Travel agent identifier
     * @param {number} [page] Specifies the page number to retrieve. If omitted, the default is 0, which represents the first page. For example, page&#x3D;1 represents the second page, and so on.
     * @param {number} [size] Specifies the number of elements to include in each page. If omitted, the default value is 20, and the maximum is 200. If the value exceeds 200, only 200 elements will be returned.
     * @param {string} [fieldsToInclude] Comma-separated list of field names to include in the response. Use dot notation for nested fields (\&#39;rooms.field1\&#39;). To include all fields from a nested object, specify the object name only (\&#39;rooms\&#39;). If not provided, all fields will be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPropertiesPageUsingGET: async (
      travelAgentId: number = this.configuration.travelAgentId,
      page?: number,
      size?: number,
      fieldsToInclude?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'travelAgentId' is not null or undefined
      assertParamExists(
        "getPropertiesPageUsingGET",
        "travelAgentId",
        travelAgentId
      );
      const localVarPath =
        `/api/external/v2/travelAgents/{travelAgentId}/properties`.replace(
          `{${"travelAgentId"}}`,
          encodeURIComponent(String(travelAgentId))
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication API KEY required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-KEY",
        configuration
      );

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (size !== undefined) {
        localVarQueryParameter["size"] = size;
      }

      if (fieldsToInclude !== undefined) {
        localVarQueryParameter["fieldsToInclude"] = fieldsToInclude;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Retrieves detailed information for a specific property associated with a travel agent, with optional filtering on specific fields. By default, all property details are returned, but the \'fieldsToInclude\' parameter allows you to specify a subset of fields if all information is not needed.
     * @summary NEW - Get Property Details
     * @param {number} travelAgentId Travel agent identifier
     * @param {number} id Property identifier
     * @param {string} [fieldsToInclude] Comma-separated list of field names to include in the response. Use dot notation for nested fields (\&#39;rooms.field1\&#39;). To include all fields from a nested object, specify the object name only (\&#39;rooms\&#39;). If not provided, all fields will be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPropertyUsingGET: async (
      travelAgentId: number = this.configuration.travelAgentId,
      id: number,
      fieldsToInclude?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'travelAgentId' is not null or undefined
      assertParamExists("getPropertyUsingGET", "travelAgentId", travelAgentId);
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getPropertyUsingGET", "id", id);
      const localVarPath =
        `/api/external/v2/travelAgents/{travelAgentId}/properties/{id}`
          .replace(
            `{${"travelAgentId"}}`,
            encodeURIComponent(String(travelAgentId))
          )
          .replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication API KEY required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-KEY",
        configuration
      );

      if (fieldsToInclude !== undefined) {
        localVarQueryParameter["fieldsToInclude"] = fieldsToInclude;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * GetPropertyContentApi - functional programming interface
 * @export
 */
export const GetPropertyContentApiFp = function (
  configuration?: Configuration
) {
  const localVarAxiosParamCreator =
    GetPropertyContentApiAxiosParamCreator(configuration);
  return {
    /**
     * Retrieves a paginated list of properties for a specified travel agent, with optional filtering on specific fields. By default, all property details are returned, but the \'fieldsToInclude\' parameter allows you to specify a subset of fields if all information is not needed.
     * @summary NEW - Get Properties Page
     * @param {number} travelAgentId Travel agent identifier
     * @param {number} [page] Specifies the page number to retrieve. If omitted, the default is 0, which represents the first page. For example, page&#x3D;1 represents the second page, and so on.
     * @param {number} [size] Specifies the number of elements to include in each page. If omitted, the default value is 20, and the maximum is 200. If the value exceeds 200, only 200 elements will be returned.
     * @param {string} [fieldsToInclude] Comma-separated list of field names to include in the response. Use dot notation for nested fields (\&#39;rooms.field1\&#39;). To include all fields from a nested object, specify the object name only (\&#39;rooms\&#39;). If not provided, all fields will be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getPropertiesPageUsingGET(
      travelAgentId: number = this.configuration.travelAgentId,
      page?: number,
      size?: number,
      fieldsToInclude?: string,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<PagePropertyExtendedResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getPropertiesPageUsingGET(
          travelAgentId,
          page,
          size,
          fieldsToInclude,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["GetPropertyContentApi.getPropertiesPageUsingGET"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Retrieves detailed information for a specific property associated with a travel agent, with optional filtering on specific fields. By default, all property details are returned, but the \'fieldsToInclude\' parameter allows you to specify a subset of fields if all information is not needed.
     * @summary NEW - Get Property Details
     * @param {number} travelAgentId Travel agent identifier
     * @param {number} id Property identifier
     * @param {string} [fieldsToInclude] Comma-separated list of field names to include in the response. Use dot notation for nested fields (\&#39;rooms.field1\&#39;). To include all fields from a nested object, specify the object name only (\&#39;rooms\&#39;). If not provided, all fields will be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getPropertyUsingGET(
      travelAgentId: number = this.configuration.travelAgentId,
      id: number,
      fieldsToInclude?: string,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<PropertyExtendedResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getPropertyUsingGET(
          travelAgentId,
          id,
          fieldsToInclude,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["GetPropertyContentApi.getPropertyUsingGET"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * GetPropertyContentApi - factory interface
 * @export
 */
export const GetPropertyContentApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = GetPropertyContentApiFp(configuration);
  return {
    /**
     * Retrieves a paginated list of properties for a specified travel agent, with optional filtering on specific fields. By default, all property details are returned, but the \'fieldsToInclude\' parameter allows you to specify a subset of fields if all information is not needed.
     * @summary NEW - Get Properties Page
     * @param {number} travelAgentId Travel agent identifier
     * @param {number} [page] Specifies the page number to retrieve. If omitted, the default is 0, which represents the first page. For example, page&#x3D;1 represents the second page, and so on.
     * @param {number} [size] Specifies the number of elements to include in each page. If omitted, the default value is 20, and the maximum is 200. If the value exceeds 200, only 200 elements will be returned.
     * @param {string} [fieldsToInclude] Comma-separated list of field names to include in the response. Use dot notation for nested fields (\&#39;rooms.field1\&#39;). To include all fields from a nested object, specify the object name only (\&#39;rooms\&#39;). If not provided, all fields will be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPropertiesPageUsingGET(
      travelAgentId: number = this.configuration.travelAgentId,
      page?: number,
      size?: number,
      fieldsToInclude?: string,
      options?: any
    ): AxiosPromise<PagePropertyExtendedResponse> {
      return localVarFp
        .getPropertiesPageUsingGET(
          travelAgentId,
          page,
          size,
          fieldsToInclude,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * Retrieves detailed information for a specific property associated with a travel agent, with optional filtering on specific fields. By default, all property details are returned, but the \'fieldsToInclude\' parameter allows you to specify a subset of fields if all information is not needed.
     * @summary NEW - Get Property Details
     * @param {number} travelAgentId Travel agent identifier
     * @param {number} id Property identifier
     * @param {string} [fieldsToInclude] Comma-separated list of field names to include in the response. Use dot notation for nested fields (\&#39;rooms.field1\&#39;). To include all fields from a nested object, specify the object name only (\&#39;rooms\&#39;). If not provided, all fields will be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPropertyUsingGET(
      travelAgentId: number = this.configuration.travelAgentId,
      id: number,
      fieldsToInclude?: string,
      options?: any
    ): AxiosPromise<PropertyExtendedResponse> {
      return localVarFp
        .getPropertyUsingGET(travelAgentId, id, fieldsToInclude, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * GetPropertyContentApi - object-oriented interface
 * @export
 * @class GetPropertyContentApi
 * @extends {BaseAPI}
 */
export class GetPropertyContentApi extends BaseAPI {
  /**
   * Retrieves a paginated list of properties for a specified travel agent, with optional filtering on specific fields. By default, all property details are returned, but the \'fieldsToInclude\' parameter allows you to specify a subset of fields if all information is not needed.
   * @summary NEW - Get Properties Page
   * @param {number} travelAgentId Travel agent identifier
   * @param {number} [page] Specifies the page number to retrieve. If omitted, the default is 0, which represents the first page. For example, page&#x3D;1 represents the second page, and so on.
   * @param {number} [size] Specifies the number of elements to include in each page. If omitted, the default value is 20, and the maximum is 200. If the value exceeds 200, only 200 elements will be returned.
   * @param {string} [fieldsToInclude] Comma-separated list of field names to include in the response. Use dot notation for nested fields (\&#39;rooms.field1\&#39;). To include all fields from a nested object, specify the object name only (\&#39;rooms\&#39;). If not provided, all fields will be returned.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GetPropertyContentApi
   */
  public getPropertiesPageUsingGET(
    page?: number,
    size?: number,
    fieldsToInclude?: string,
    options?: RawAxiosRequestConfig
  ) {
    return GetPropertyContentApiFp(this.configuration)
      .getPropertiesPageUsingGET(
        this.configuration.travelAgentId,
        page,
        size,
        fieldsToInclude,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Retrieves detailed information for a specific property associated with a travel agent, with optional filtering on specific fields. By default, all property details are returned, but the \'fieldsToInclude\' parameter allows you to specify a subset of fields if all information is not needed.
   * @summary NEW - Get Property Details
   * @param {number} travelAgentId Travel agent identifier
   * @param {number} id Property identifier
   * @param {string} [fieldsToInclude] Comma-separated list of field names to include in the response. Use dot notation for nested fields (\&#39;rooms.field1\&#39;). To include all fields from a nested object, specify the object name only (\&#39;rooms\&#39;). If not provided, all fields will be returned.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GetPropertyContentApi
   */
  public getPropertyUsingGET(
    id: number,
    fieldsToInclude?: string,
    options?: RawAxiosRequestConfig
  ) {
    return GetPropertyContentApiFp(this.configuration)
      .getPropertyUsingGET(
        this.configuration.travelAgentId,
        id,
        fieldsToInclude,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * GetTravelAgencyContentApi - axios parameter creator
 * @export
 */
export const GetTravelAgencyContentApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * This endpoint retrieves all travel agencies associated with the user. It returns an empty list if no agencies are found.
     * @summary Get a list of travel agencies owned by the current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTravelAgentsUsingGET: async (
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/external/v2/travelAgents`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication API KEY required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-KEY",
        configuration
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * GetTravelAgencyContentApi - functional programming interface
 * @export
 */
export const GetTravelAgencyContentApiFp = function (
  configuration?: Configuration
) {
  const localVarAxiosParamCreator =
    GetTravelAgencyContentApiAxiosParamCreator(configuration);
  return {
    /**
     * This endpoint retrieves all travel agencies associated with the user. It returns an empty list if no agencies are found.
     * @summary Get a list of travel agencies owned by the current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getTravelAgentsUsingGET(
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<TravelAgentResponse>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getTravelAgentsUsingGET(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "GetTravelAgencyContentApi.getTravelAgentsUsingGET"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * GetTravelAgencyContentApi - factory interface
 * @export
 */
export const GetTravelAgencyContentApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = GetTravelAgencyContentApiFp(configuration);
  return {
    /**
     * This endpoint retrieves all travel agencies associated with the user. It returns an empty list if no agencies are found.
     * @summary Get a list of travel agencies owned by the current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTravelAgentsUsingGET(
      options?: any
    ): AxiosPromise<Array<TravelAgentResponse>> {
      return localVarFp
        .getTravelAgentsUsingGET(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * GetTravelAgencyContentApi - object-oriented interface
 * @export
 * @class GetTravelAgencyContentApi
 * @extends {BaseAPI}
 */
export class GetTravelAgencyContentApi extends BaseAPI {
  /**
   * This endpoint retrieves all travel agencies associated with the user. It returns an empty list if no agencies are found.
   * @summary Get a list of travel agencies owned by the current user
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GetTravelAgencyContentApi
   */
  public getTravelAgentsUsingGET(options?: RawAxiosRequestConfig) {
    return GetTravelAgencyContentApiFp(this.configuration)
      .getTravelAgentsUsingGET(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * MakeABookingApi - axios parameter creator
 * @export
 */
export const MakeABookingApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * Travel agent identification number and booking identification number are needed as a path variable.<br/>The travel agent manager or employee can add booking rooms to a booking. In order to perform the addition a set of conditions need to be met:<br/>- Check in date must be in the future and before check out date<br/>- If the property allows booking for the same day the booking must be made before the check in end time<br/>- Check out date must be in future<br/>- The quantity of rooms must be a positive number<br/>- The requested quantity of rooms must be available<br/>Otherwise, an appropriate error message will be presented.
     * @summary Add booking rooms to a booking
     * @param {number} travelAgentId Travel agent identification number
     * @param {number} id Booking identification number
     * @param {BookingRoomCreateRequest} bookingRoomCreateRequest Request body for list of BookingRoomCreateRequest in json format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addBookingRoomsToTravelAgentBookingUsingPOST: async (
      travelAgentId: number = this.configuration.travelAgentId,
      id: number,
      bookingRoomCreateRequest: BookingRoomCreateRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'travelAgentId' is not null or undefined
      assertParamExists(
        "addBookingRoomsToTravelAgentBookingUsingPOST",
        "travelAgentId",
        travelAgentId
      );
      // verify required parameter 'id' is not null or undefined
      assertParamExists(
        "addBookingRoomsToTravelAgentBookingUsingPOST",
        "id",
        id
      );
      // verify required parameter 'bookingRoomCreateRequest' is not null or undefined
      assertParamExists(
        "addBookingRoomsToTravelAgentBookingUsingPOST",
        "bookingRoomCreateRequest",
        bookingRoomCreateRequest
      );
      const localVarPath =
        `/api/external/v2/travelAgents/{travelAgentId}/booking/{id}`
          .replace(
            `{${"travelAgentId"}}`,
            encodeURIComponent(String(travelAgentId))
          )
          .replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication API KEY required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-KEY",
        configuration
      );

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        bookingRoomCreateRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * <p>   This endpoint facilitates the creation of various types of bookings for a specified travel agent,    identified by the <code>travelAgentId</code>. It is versatile and supports different booking types    such as accommodations, car rentals, etc., which are specified using the <code>bookingTypeCode</code>    in the request body.</p> <p>If the <code>bookingTypeCode</code> is omitted, the default booking type is set to accommodation.</p> <h5><strong>Common Fields:</strong></h5><p>All booking types include a set of common fields:</p><ul>   <li>       Each booking must be part of a booking cart. To add a booking to an existing cart, the        <code>bookingCartId</code> must be passed in the request body. If the <code>bookingCartId</code> is not provided,        and a new booking cart is not specified to be created with <code>createNewBookingCart</code> as a query parameter,        the system will attempt to find an open booking cart to place the booking. If no open cart is found, or if a new   booking cart is specified to be created, a new booking cart will be created.   </li>   <li>       Specify whether the booking should be confirmed with <code>confirm</code> in the request body.        Confirmed bookings are forwarded to the supplier and synchronized. If not initially confirmed,        bookings must be confirmed additionally.   </li>   <li><code>name</code> of the booking</li>   <li><code>notes</code> for the booking</li>   <li><code>countryCode</code>, the ISO code of the country where the visitors come from</li>   <li><code>fieldsToInclude</code>, specifying which fields should be included in the response</li>   <li><code>bookingTypeCode</code>, specifying the type of booking to create</li>   <li><code>reference</code>, a unique reference ID generated during the previous request</li></ul><h5><strong>Type-Specific Fields:</strong></h5><p>Depending on the <code>bookingTypeCode</code>, additional type-specific fields are required:</p><ul>   <li><strong>Accommodation</strong>: bookingRooms, propertyId, instant.</li>   <li><strong>Car Rental</strong>: customer and bookingCarRental.</li>   <li><strong>Activity</strong>: customer and bookingActivity.</li></ul><p>   The system validates the request based on the <code>bookingTypeCode</code> to ensure all necessary    information is included. Depending on the booking type, the response will include relevant details    specific to that booking type. Some response fields are common across all bookings, while others    are type-specific. <strong>Further details can be found in the model documentation.</strong></p> <p>    The response will detail the booking cart and the created booking, including the status of the bookings,    the status of the booking cart, and the status of synchronization with the suppliers. </p>
     * @summary Create a booking
     * @param {number} travelAgentId Travel Agent identification number
     * @param {BookingCreateRequest} bookingCreateRequest Request body for BookingCreateRequest object in JSON format
     * @param {boolean} [createNewBookingCart] Specifies whether to create a new booking cart when adding the booking or use an existing open one
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addBookingToTravelAgentBookingCartUsingPOST: async (
      travelAgentId: number = this.configuration.travelAgentId,
      bookingCreateRequest: BookingCreateRequest,
      createNewBookingCart?: boolean,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'travelAgentId' is not null or undefined
      assertParamExists(
        "addBookingToTravelAgentBookingCartUsingPOST",
        "travelAgentId",
        travelAgentId
      );
      // verify required parameter 'bookingCreateRequest' is not null or undefined
      assertParamExists(
        "addBookingToTravelAgentBookingCartUsingPOST",
        "bookingCreateRequest",
        bookingCreateRequest
      );
      const localVarPath =
        `/api/external/v2/travelAgents/{travelAgentId}/bookingCarts`.replace(
          `{${"travelAgentId"}}`,
          encodeURIComponent(String(travelAgentId))
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication API KEY required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-KEY",
        configuration
      );

      if (createNewBookingCart !== undefined) {
        localVarQueryParameter["createNewBookingCart"] = createNewBookingCart;
      }

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        bookingCreateRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * <b>This endpoint initiates the creation of a new booking cart containing multiple bookings.</b> It is designed to accommodate various types of bookings—each with its own set of attributes and requirements—in a single cart. <br><br>The process for adding each booking to the cart adheres to the same standards and rules as when creating individual bookings. This ensures that whether a booking is made individually or as part of a multi-booking cart, the information required and the steps followed remain consistent. <br><br>Please refer to the documentation for creating a single booking to understand the details necessary for each booking type. <br><br><p>The response will provide comprehensive details about the new booking cart, including the status of each booking, the overall status of the booking cart, and the synchronization status with external providers.</p>
     * @summary Create a new booking cart with multiple bookings
     * @param {number} travelAgentId Travel Agent identification number
     * @param {BookingCartCreateRequest} bookingCartCreateRequest Request body containing multiple bookings to create a new booking cart
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addBookingsToTravelAgentBookingCartUsingPOST: async (
      travelAgentId: number = this.configuration.travelAgentId,
      bookingCartCreateRequest: BookingCartCreateRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'travelAgentId' is not null or undefined
      assertParamExists(
        "addBookingsToTravelAgentBookingCartUsingPOST",
        "travelAgentId",
        travelAgentId
      );
      // verify required parameter 'bookingCartCreateRequest' is not null or undefined
      assertParamExists(
        "addBookingsToTravelAgentBookingCartUsingPOST",
        "bookingCartCreateRequest",
        bookingCartCreateRequest
      );
      const localVarPath =
        `/api/external/v2/travelAgents/{travelAgentId}/bookingCarts/multiBookings`.replace(
          `{${"travelAgentId"}}`,
          encodeURIComponent(String(travelAgentId))
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication API KEY required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-KEY",
        configuration
      );

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        bookingCartCreateRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Travel agent identification number and booking cart identification number are needed as path variables.<br/>All the bookings found in the cart will be confirmed from the travel agent and sent to the property.<br/>The status of the booking cart will be changed to \'Confirmed\' and the status of the bookings in the cart will be changed from \'Pending\' to \'Requested\' or to \'Approved\' depending whether the booking instant attribute is enabled and possible for the booking.
     * @summary Confirm a booking cart
     * @param {number} travelAgentId Travel Agent identification number
     * @param {number} id Booking Cart identification number
     * @param {BookingCartConfirmRequest} [bookingCartConfirmRequest] Request body for list of BookingCartConfirmRequest in json format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    confirmTravelAgentBookingCartUsingPOST: async (
      travelAgentId: number = this.configuration.travelAgentId,
      id: number,
      bookingCartConfirmRequest?: BookingCartConfirmRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'travelAgentId' is not null or undefined
      assertParamExists(
        "confirmTravelAgentBookingCartUsingPOST",
        "travelAgentId",
        travelAgentId
      );
      // verify required parameter 'id' is not null or undefined
      assertParamExists("confirmTravelAgentBookingCartUsingPOST", "id", id);
      const localVarPath =
        `/api/external/v2/travelAgents/{travelAgentId}/bookingCarts/{id}/confirm`
          .replace(
            `{${"travelAgentId"}}`,
            encodeURIComponent(String(travelAgentId))
          )
          .replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication API KEY required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-KEY",
        configuration
      );

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        bookingCartConfirmRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * MakeABookingApi - functional programming interface
 * @export
 */
export const MakeABookingApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    MakeABookingApiAxiosParamCreator(configuration);
  return {
    /**
     * Travel agent identification number and booking identification number are needed as a path variable.<br/>The travel agent manager or employee can add booking rooms to a booking. In order to perform the addition a set of conditions need to be met:<br/>- Check in date must be in the future and before check out date<br/>- If the property allows booking for the same day the booking must be made before the check in end time<br/>- Check out date must be in future<br/>- The quantity of rooms must be a positive number<br/>- The requested quantity of rooms must be available<br/>Otherwise, an appropriate error message will be presented.
     * @summary Add booking rooms to a booking
     * @param {number} travelAgentId Travel agent identification number
     * @param {number} id Booking identification number
     * @param {BookingRoomCreateRequest} bookingRoomCreateRequest Request body for list of BookingRoomCreateRequest in json format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addBookingRoomsToTravelAgentBookingUsingPOST(
      travelAgentId: number = this.configuration.travelAgentId,
      id: number,
      bookingRoomCreateRequest: BookingRoomCreateRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<BookingResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.addBookingRoomsToTravelAgentBookingUsingPOST(
          travelAgentId,
          id,
          bookingRoomCreateRequest,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "MakeABookingApi.addBookingRoomsToTravelAgentBookingUsingPOST"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * <p>   This endpoint facilitates the creation of various types of bookings for a specified travel agent,    identified by the <code>travelAgentId</code>. It is versatile and supports different booking types    such as accommodations, car rentals, etc., which are specified using the <code>bookingTypeCode</code>    in the request body.</p> <p>If the <code>bookingTypeCode</code> is omitted, the default booking type is set to accommodation.</p> <h5><strong>Common Fields:</strong></h5><p>All booking types include a set of common fields:</p><ul>   <li>       Each booking must be part of a booking cart. To add a booking to an existing cart, the        <code>bookingCartId</code> must be passed in the request body. If the <code>bookingCartId</code> is not provided,        and a new booking cart is not specified to be created with <code>createNewBookingCart</code> as a query parameter,        the system will attempt to find an open booking cart to place the booking. If no open cart is found, or if a new   booking cart is specified to be created, a new booking cart will be created.   </li>   <li>       Specify whether the booking should be confirmed with <code>confirm</code> in the request body.        Confirmed bookings are forwarded to the supplier and synchronized. If not initially confirmed,        bookings must be confirmed additionally.   </li>   <li><code>name</code> of the booking</li>   <li><code>notes</code> for the booking</li>   <li><code>countryCode</code>, the ISO code of the country where the visitors come from</li>   <li><code>fieldsToInclude</code>, specifying which fields should be included in the response</li>   <li><code>bookingTypeCode</code>, specifying the type of booking to create</li>   <li><code>reference</code>, a unique reference ID generated during the previous request</li></ul><h5><strong>Type-Specific Fields:</strong></h5><p>Depending on the <code>bookingTypeCode</code>, additional type-specific fields are required:</p><ul>   <li><strong>Accommodation</strong>: bookingRooms, propertyId, instant.</li>   <li><strong>Car Rental</strong>: customer and bookingCarRental.</li>   <li><strong>Activity</strong>: customer and bookingActivity.</li></ul><p>   The system validates the request based on the <code>bookingTypeCode</code> to ensure all necessary    information is included. Depending on the booking type, the response will include relevant details    specific to that booking type. Some response fields are common across all bookings, while others    are type-specific. <strong>Further details can be found in the model documentation.</strong></p> <p>    The response will detail the booking cart and the created booking, including the status of the bookings,    the status of the booking cart, and the status of synchronization with the suppliers. </p>
     * @summary Create a booking
     * @param {number} travelAgentId Travel Agent identification number
     * @param {BookingCreateRequest} bookingCreateRequest Request body for BookingCreateRequest object in JSON format
     * @param {boolean} [createNewBookingCart] Specifies whether to create a new booking cart when adding the booking or use an existing open one
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addBookingToTravelAgentBookingCartUsingPOST(
      travelAgentId: number = this.configuration.travelAgentId,
      bookingCreateRequest: BookingCreateRequest,
      createNewBookingCart?: boolean,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<BookingCartResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.addBookingToTravelAgentBookingCartUsingPOST(
          travelAgentId,
          bookingCreateRequest,
          createNewBookingCart,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "MakeABookingApi.addBookingToTravelAgentBookingCartUsingPOST"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * <b>This endpoint initiates the creation of a new booking cart containing multiple bookings.</b> It is designed to accommodate various types of bookings—each with its own set of attributes and requirements—in a single cart. <br><br>The process for adding each booking to the cart adheres to the same standards and rules as when creating individual bookings. This ensures that whether a booking is made individually or as part of a multi-booking cart, the information required and the steps followed remain consistent. <br><br>Please refer to the documentation for creating a single booking to understand the details necessary for each booking type. <br><br><p>The response will provide comprehensive details about the new booking cart, including the status of each booking, the overall status of the booking cart, and the synchronization status with external providers.</p>
     * @summary Create a new booking cart with multiple bookings
     * @param {number} travelAgentId Travel Agent identification number
     * @param {BookingCartCreateRequest} bookingCartCreateRequest Request body containing multiple bookings to create a new booking cart
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addBookingsToTravelAgentBookingCartUsingPOST(
      travelAgentId: number = this.configuration.travelAgentId,
      bookingCartCreateRequest: BookingCartCreateRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<BookingCartResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.addBookingsToTravelAgentBookingCartUsingPOST(
          travelAgentId,
          bookingCartCreateRequest,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "MakeABookingApi.addBookingsToTravelAgentBookingCartUsingPOST"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Travel agent identification number and booking cart identification number are needed as path variables.<br/>All the bookings found in the cart will be confirmed from the travel agent and sent to the property.<br/>The status of the booking cart will be changed to \'Confirmed\' and the status of the bookings in the cart will be changed from \'Pending\' to \'Requested\' or to \'Approved\' depending whether the booking instant attribute is enabled and possible for the booking.
     * @summary Confirm a booking cart
     * @param {number} travelAgentId Travel Agent identification number
     * @param {number} id Booking Cart identification number
     * @param {BookingCartConfirmRequest} [bookingCartConfirmRequest] Request body for list of BookingCartConfirmRequest in json format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async confirmTravelAgentBookingCartUsingPOST(
      travelAgentId: number = this.configuration.travelAgentId,
      id: number,
      bookingCartConfirmRequest?: BookingCartConfirmRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<BookingCartResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.confirmTravelAgentBookingCartUsingPOST(
          travelAgentId,
          id,
          bookingCartConfirmRequest,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "MakeABookingApi.confirmTravelAgentBookingCartUsingPOST"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * MakeABookingApi - factory interface
 * @export
 */
export const MakeABookingApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = MakeABookingApiFp(configuration);
  return {
    /**
     * Travel agent identification number and booking identification number are needed as a path variable.<br/>The travel agent manager or employee can add booking rooms to a booking. In order to perform the addition a set of conditions need to be met:<br/>- Check in date must be in the future and before check out date<br/>- If the property allows booking for the same day the booking must be made before the check in end time<br/>- Check out date must be in future<br/>- The quantity of rooms must be a positive number<br/>- The requested quantity of rooms must be available<br/>Otherwise, an appropriate error message will be presented.
     * @summary Add booking rooms to a booking
     * @param {number} travelAgentId Travel agent identification number
     * @param {number} id Booking identification number
     * @param {BookingRoomCreateRequest} bookingRoomCreateRequest Request body for list of BookingRoomCreateRequest in json format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addBookingRoomsToTravelAgentBookingUsingPOST(
      travelAgentId: number = this.configuration.travelAgentId,
      id: number,
      bookingRoomCreateRequest: BookingRoomCreateRequest,
      options?: any
    ): AxiosPromise<BookingResponse> {
      return localVarFp
        .addBookingRoomsToTravelAgentBookingUsingPOST(
          travelAgentId,
          id,
          bookingRoomCreateRequest,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * <p>   This endpoint facilitates the creation of various types of bookings for a specified travel agent,    identified by the <code>travelAgentId</code>. It is versatile and supports different booking types    such as accommodations, car rentals, etc., which are specified using the <code>bookingTypeCode</code>    in the request body.</p> <p>If the <code>bookingTypeCode</code> is omitted, the default booking type is set to accommodation.</p> <h5><strong>Common Fields:</strong></h5><p>All booking types include a set of common fields:</p><ul>   <li>       Each booking must be part of a booking cart. To add a booking to an existing cart, the        <code>bookingCartId</code> must be passed in the request body. If the <code>bookingCartId</code> is not provided,        and a new booking cart is not specified to be created with <code>createNewBookingCart</code> as a query parameter,        the system will attempt to find an open booking cart to place the booking. If no open cart is found, or if a new   booking cart is specified to be created, a new booking cart will be created.   </li>   <li>       Specify whether the booking should be confirmed with <code>confirm</code> in the request body.        Confirmed bookings are forwarded to the supplier and synchronized. If not initially confirmed,        bookings must be confirmed additionally.   </li>   <li><code>name</code> of the booking</li>   <li><code>notes</code> for the booking</li>   <li><code>countryCode</code>, the ISO code of the country where the visitors come from</li>   <li><code>fieldsToInclude</code>, specifying which fields should be included in the response</li>   <li><code>bookingTypeCode</code>, specifying the type of booking to create</li>   <li><code>reference</code>, a unique reference ID generated during the previous request</li></ul><h5><strong>Type-Specific Fields:</strong></h5><p>Depending on the <code>bookingTypeCode</code>, additional type-specific fields are required:</p><ul>   <li><strong>Accommodation</strong>: bookingRooms, propertyId, instant.</li>   <li><strong>Car Rental</strong>: customer and bookingCarRental.</li>   <li><strong>Activity</strong>: customer and bookingActivity.</li></ul><p>   The system validates the request based on the <code>bookingTypeCode</code> to ensure all necessary    information is included. Depending on the booking type, the response will include relevant details    specific to that booking type. Some response fields are common across all bookings, while others    are type-specific. <strong>Further details can be found in the model documentation.</strong></p> <p>    The response will detail the booking cart and the created booking, including the status of the bookings,    the status of the booking cart, and the status of synchronization with the suppliers. </p>
     * @summary Create a booking
     * @param {number} travelAgentId Travel Agent identification number
     * @param {BookingCreateRequest} bookingCreateRequest Request body for BookingCreateRequest object in JSON format
     * @param {boolean} [createNewBookingCart] Specifies whether to create a new booking cart when adding the booking or use an existing open one
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addBookingToTravelAgentBookingCartUsingPOST(
      travelAgentId: number = this.configuration.travelAgentId,
      bookingCreateRequest: BookingCreateRequest,
      createNewBookingCart?: boolean,
      options?: any
    ): AxiosPromise<BookingCartResponse> {
      return localVarFp
        .addBookingToTravelAgentBookingCartUsingPOST(
          travelAgentId,
          bookingCreateRequest,
          createNewBookingCart,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * <b>This endpoint initiates the creation of a new booking cart containing multiple bookings.</b> It is designed to accommodate various types of bookings—each with its own set of attributes and requirements—in a single cart. <br><br>The process for adding each booking to the cart adheres to the same standards and rules as when creating individual bookings. This ensures that whether a booking is made individually or as part of a multi-booking cart, the information required and the steps followed remain consistent. <br><br>Please refer to the documentation for creating a single booking to understand the details necessary for each booking type. <br><br><p>The response will provide comprehensive details about the new booking cart, including the status of each booking, the overall status of the booking cart, and the synchronization status with external providers.</p>
     * @summary Create a new booking cart with multiple bookings
     * @param {number} travelAgentId Travel Agent identification number
     * @param {BookingCartCreateRequest} bookingCartCreateRequest Request body containing multiple bookings to create a new booking cart
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addBookingsToTravelAgentBookingCartUsingPOST(
      travelAgentId: number = this.configuration.travelAgentId,
      bookingCartCreateRequest: BookingCartCreateRequest,
      options?: any
    ): AxiosPromise<BookingCartResponse> {
      return localVarFp
        .addBookingsToTravelAgentBookingCartUsingPOST(
          travelAgentId,
          bookingCartCreateRequest,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * Travel agent identification number and booking cart identification number are needed as path variables.<br/>All the bookings found in the cart will be confirmed from the travel agent and sent to the property.<br/>The status of the booking cart will be changed to \'Confirmed\' and the status of the bookings in the cart will be changed from \'Pending\' to \'Requested\' or to \'Approved\' depending whether the booking instant attribute is enabled and possible for the booking.
     * @summary Confirm a booking cart
     * @param {number} travelAgentId Travel Agent identification number
     * @param {number} id Booking Cart identification number
     * @param {BookingCartConfirmRequest} [bookingCartConfirmRequest] Request body for list of BookingCartConfirmRequest in json format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    confirmTravelAgentBookingCartUsingPOST(
      travelAgentId: number = this.configuration.travelAgentId,
      id: number,
      bookingCartConfirmRequest?: BookingCartConfirmRequest,
      options?: any
    ): AxiosPromise<BookingCartResponse> {
      return localVarFp
        .confirmTravelAgentBookingCartUsingPOST(
          travelAgentId,
          id,
          bookingCartConfirmRequest,
          options
        )
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * MakeABookingApi - object-oriented interface
 * @export
 * @class MakeABookingApi
 * @extends {BaseAPI}
 */
export class MakeABookingApi extends BaseAPI {
  /**
   * Travel agent identification number and booking identification number are needed as a path variable.<br/>The travel agent manager or employee can add booking rooms to a booking. In order to perform the addition a set of conditions need to be met:<br/>- Check in date must be in the future and before check out date<br/>- If the property allows booking for the same day the booking must be made before the check in end time<br/>- Check out date must be in future<br/>- The quantity of rooms must be a positive number<br/>- The requested quantity of rooms must be available<br/>Otherwise, an appropriate error message will be presented.
   * @summary Add booking rooms to a booking
   * @param {number} travelAgentId Travel agent identification number
   * @param {number} id Booking identification number
   * @param {BookingRoomCreateRequest} bookingRoomCreateRequest Request body for list of BookingRoomCreateRequest in json format
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MakeABookingApi
   */
  public addBookingRoomsToTravelAgentBookingUsingPOST(
    id: number,
    bookingRoomCreateRequest: BookingRoomCreateRequest,
    options?: RawAxiosRequestConfig
  ) {
    return MakeABookingApiFp(this.configuration)
      .addBookingRoomsToTravelAgentBookingUsingPOST(
        this.configuration.travelAgentId,
        id,
        bookingRoomCreateRequest,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * <p>   This endpoint facilitates the creation of various types of bookings for a specified travel agent,    identified by the <code>travelAgentId</code>. It is versatile and supports different booking types    such as accommodations, car rentals, etc., which are specified using the <code>bookingTypeCode</code>    in the request body.</p> <p>If the <code>bookingTypeCode</code> is omitted, the default booking type is set to accommodation.</p> <h5><strong>Common Fields:</strong></h5><p>All booking types include a set of common fields:</p><ul>   <li>       Each booking must be part of a booking cart. To add a booking to an existing cart, the        <code>bookingCartId</code> must be passed in the request body. If the <code>bookingCartId</code> is not provided,        and a new booking cart is not specified to be created with <code>createNewBookingCart</code> as a query parameter,        the system will attempt to find an open booking cart to place the booking. If no open cart is found, or if a new   booking cart is specified to be created, a new booking cart will be created.   </li>   <li>       Specify whether the booking should be confirmed with <code>confirm</code> in the request body.        Confirmed bookings are forwarded to the supplier and synchronized. If not initially confirmed,        bookings must be confirmed additionally.   </li>   <li><code>name</code> of the booking</li>   <li><code>notes</code> for the booking</li>   <li><code>countryCode</code>, the ISO code of the country where the visitors come from</li>   <li><code>fieldsToInclude</code>, specifying which fields should be included in the response</li>   <li><code>bookingTypeCode</code>, specifying the type of booking to create</li>   <li><code>reference</code>, a unique reference ID generated during the previous request</li></ul><h5><strong>Type-Specific Fields:</strong></h5><p>Depending on the <code>bookingTypeCode</code>, additional type-specific fields are required:</p><ul>   <li><strong>Accommodation</strong>: bookingRooms, propertyId, instant.</li>   <li><strong>Car Rental</strong>: customer and bookingCarRental.</li>   <li><strong>Activity</strong>: customer and bookingActivity.</li></ul><p>   The system validates the request based on the <code>bookingTypeCode</code> to ensure all necessary    information is included. Depending on the booking type, the response will include relevant details    specific to that booking type. Some response fields are common across all bookings, while others    are type-specific. <strong>Further details can be found in the model documentation.</strong></p> <p>    The response will detail the booking cart and the created booking, including the status of the bookings,    the status of the booking cart, and the status of synchronization with the suppliers. </p>
   * @summary Create a booking
   * @param {number} travelAgentId Travel Agent identification number
   * @param {BookingCreateRequest} bookingCreateRequest Request body for BookingCreateRequest object in JSON format
   * @param {boolean} [createNewBookingCart] Specifies whether to create a new booking cart when adding the booking or use an existing open one
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MakeABookingApi
   */
  public addBookingToTravelAgentBookingCartUsingPOST(
    bookingCreateRequest: BookingCreateRequest,
    createNewBookingCart?: boolean,
    options?: RawAxiosRequestConfig
  ) {
    return MakeABookingApiFp(this.configuration)
      .addBookingToTravelAgentBookingCartUsingPOST(
        this.configuration.travelAgentId,
        bookingCreateRequest,
        createNewBookingCart,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * <b>This endpoint initiates the creation of a new booking cart containing multiple bookings.</b> It is designed to accommodate various types of bookings—each with its own set of attributes and requirements—in a single cart. <br><br>The process for adding each booking to the cart adheres to the same standards and rules as when creating individual bookings. This ensures that whether a booking is made individually or as part of a multi-booking cart, the information required and the steps followed remain consistent. <br><br>Please refer to the documentation for creating a single booking to understand the details necessary for each booking type. <br><br><p>The response will provide comprehensive details about the new booking cart, including the status of each booking, the overall status of the booking cart, and the synchronization status with external providers.</p>
   * @summary Create a new booking cart with multiple bookings
   * @param {number} travelAgentId Travel Agent identification number
   * @param {BookingCartCreateRequest} bookingCartCreateRequest Request body containing multiple bookings to create a new booking cart
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MakeABookingApi
   */
  public addBookingsToTravelAgentBookingCartUsingPOST(
    bookingCartCreateRequest: BookingCartCreateRequest,
    options?: RawAxiosRequestConfig
  ) {
    return MakeABookingApiFp(this.configuration)
      .addBookingsToTravelAgentBookingCartUsingPOST(
        this.configuration.travelAgentId,
        bookingCartCreateRequest,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Travel agent identification number and booking cart identification number are needed as path variables.<br/>All the bookings found in the cart will be confirmed from the travel agent and sent to the property.<br/>The status of the booking cart will be changed to \'Confirmed\' and the status of the bookings in the cart will be changed from \'Pending\' to \'Requested\' or to \'Approved\' depending whether the booking instant attribute is enabled and possible for the booking.
   * @summary Confirm a booking cart
   * @param {number} travelAgentId Travel Agent identification number
   * @param {number} id Booking Cart identification number
   * @param {BookingCartConfirmRequest} [bookingCartConfirmRequest] Request body for list of BookingCartConfirmRequest in json format
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MakeABookingApi
   */
  public confirmTravelAgentBookingCartUsingPOST(
    id: number,
    bookingCartConfirmRequest?: BookingCartConfirmRequest,
    options?: RawAxiosRequestConfig
  ) {
    return MakeABookingApiFp(this.configuration)
      .confirmTravelAgentBookingCartUsingPOST(
        this.configuration.travelAgentId,
        id,
        bookingCartConfirmRequest,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * SearchAccommodationApi - axios parameter creator
 * @export
 */
export const SearchAccommodationApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * This endpoint return all filters for searching accommodation. The response will include list of filters divided by different categories like property types, property amenities, room types etc. For example for property types it will return all property type related filters like Hotel, Hostel, Motel etc. If you want to filter you need to use codes for all filters. For exampleif you want to filter by Hotel you need to use \'HOTEL\' which is the code for Hotel. Each filter has code in the response
     * @summary Get filters for accommodation
     * @param {number} travelAgentId The id of the travel agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFiltersUsingGET: async (
      travelAgentId: number = this.configuration.travelAgentId,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'travelAgentId' is not null or undefined
      assertParamExists("getFiltersUsingGET", "travelAgentId", travelAgentId);
      const localVarPath =
        `/api/external/v2/travelAgents/{travelAgentId}/search/filters`.replace(
          `{${"travelAgentId"}}`,
          encodeURIComponent(String(travelAgentId))
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication API KEY required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-KEY",
        configuration
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * This endpoint allows clients to search for available dates for properties based on a travel agent id, a comma-separated list of property IDs, and a date range. The date range should fall within the same month. For instance, if \'start\' is \'2023-01-01\', then \'end\' can be any date up to \'2023-01-31\'. If \'start\' or \'end\' dates are not provided, the response will include only the first available date of the property. Due to potential performance complications, currently the \'propertyIds\' parameter supports only one property id at a time.
     * @summary Retrieve available dates for properties within a specific month
     * @param {number} travelAgentId Travel Agent identification number
     * @param {string} propertyIds Comma-separated list of property ids
     * @param {string} start Start date for checking availability in yyyy-MM-dd format
     * @param {string} end End date for checking availability in yyyy-MM-dd format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrievePropertyAvailableDatesUsingGET: async (
      travelAgentId: number = this.configuration.travelAgentId,
      propertyIds: string,
      start: string,
      end: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'travelAgentId' is not null or undefined
      assertParamExists(
        "retrievePropertyAvailableDatesUsingGET",
        "travelAgentId",
        travelAgentId
      );
      // verify required parameter 'propertyIds' is not null or undefined
      assertParamExists(
        "retrievePropertyAvailableDatesUsingGET",
        "propertyIds",
        propertyIds
      );
      // verify required parameter 'start' is not null or undefined
      assertParamExists(
        "retrievePropertyAvailableDatesUsingGET",
        "start",
        start
      );
      // verify required parameter 'end' is not null or undefined
      assertParamExists("retrievePropertyAvailableDatesUsingGET", "end", end);
      const localVarPath =
        `/api/external/v2/travelAgents/{travelAgentId}/available-dates`.replace(
          `{${"travelAgentId"}}`,
          encodeURIComponent(String(travelAgentId))
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication API KEY required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-KEY",
        configuration
      );

      if (propertyIds !== undefined) {
        localVarQueryParameter["propertyIds"] = propertyIds;
      }

      if (start !== undefined) {
        localVarQueryParameter["start"] = start;
      }

      if (end !== undefined) {
        localVarQueryParameter["end"] = end;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * This endpoint serves as an intermediate step between the initial property search (`/api/external/v2/travelAgents/{id}/search`) and the final step - creating a booking. Its primary goal is to provide availability and precise pricing information for a selected room combination. Each \'booked room\' corresponds to a booking room object, detailing room ID, occupants, dates, and any optional allotment room ID. If multiple rooms have identical configurations (room ID, occupants, dates, allotment room ID and breakfast or not), then the \'quantity\' attribute can be utilized to indicate the number of such rooms instead of repeating the details.However, distinct configurations should be represented as separate booking room objects with \'quantity\' set to 1 The response provides room prices, extra bed prices if required for accommodation, and breakfast prices (if available). The response displays the room and extra bed prices, both separately and as a combined total. It also provides information about the breakfast price, allowing users to decide later if they\'d like to include it, and if they choose it and is available, you can see \'totalPriceWithBreakfast\'. There are two total prices, one without breakfast and one with breakfast, because there is no need for separate requests only if the breakfast is changed. For the subsequent booking request, ensure the response from this endpoint, alongside its reference, is passed unchanged. This ensures no booking occurs at a modified price.
     * @summary Retrieve detailed availability and pricing information for selected room combination
     * @param {number} travelAgentId Travel Agent identification number
     * @param {PropertyRatesRequest} request Request body containing details of the selected room combinations.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchPropertyRatesUsingPOST: async (
      travelAgentId: number = this.configuration.travelAgentId,
      request: PropertyRatesRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'travelAgentId' is not null or undefined
      assertParamExists(
        "searchPropertyRatesUsingPOST",
        "travelAgentId",
        travelAgentId
      );
      // verify required parameter 'request' is not null or undefined
      assertParamExists("searchPropertyRatesUsingPOST", "request", request);
      const localVarPath =
        `/api/external/v2/travelAgents/{travelAgentId}/search-rates`.replace(
          `{${"travelAgentId"}}`,
          encodeURIComponent(String(travelAgentId))
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication API KEY required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-KEY",
        configuration
      );

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        request,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * <b> This is what we call the initial search and it is usually the starting point of creating a booking. </b> <br /> This endpoint allows travel agents to search for properties based on various search criteria. <br /> <br /> Users can search for properties using any combination of the following criteria: <ul>    <li>By providing coordinates of the place, the response will only return the properties that are located in that specific area.</li>    <li>By providing a city name or location address, the response will only return the properties that are located there.</li>    <li>By providing the name of a specific property, the response will return results exclusively for that particular property.</li>    <li>By providing property IDs, the response will return a list of properties based on the ID/s sent.</li>    <li>To obtain availability and price information, users must provide exact booking check-in and check-out dates. </li>    <li>Users can specify the number of rooms and number of occupants per room to filter results. If none are specified, \'1\' is the default value for both.</li>    <li>Users can search by property and room types, and specify amenities and different features for both of them.</li>    <li>        By default, the response will only return a list of properties with whom the travel agent has a cooperation. However, the travel agent can        choose to search for properties with whom they do not have a cooperation in order to make one        that is of their interest. For these properties, the travel agent will only receive property details, and not availability and price        information.    </li>    <li>Users can choose to receive a response with a restricted number of properties that include prices, allowing for faster search results. All    the remaining properties will be without prices.</li> </ul> <br /> <p>    The result presented to the user is a list of properties with a defined availability, prices, and details related to each of the properties and their rooms individually.    <br />    The list includes: </p><ul>    <li>Fully available properties, which means that the property meets all conditions specified in the mentioned filter settings.</li>    <li>        Partially available properties, which means that the property doesn\'t have the exact capacity to accommodate all guests, doesn\'t have the        right room availability, or has lower availability than needed for some dates. In this case,        the property level availability is not full, but the user can see which available rooms fit their purpose.    </li>    <li>Properties that may not be available given the search criteria.</li> </ul> <p>If the check-in and check-out dates are not provided, but the \'minPrices\' flag is set to true,    the response will include the minimum price available for the rooms and the properties for a period of the next 365 days.    However, if the \'minPrices\' flag is false or omitted, the response will only include a list of properties with their details, but without availability and prices. </p>
     * @summary Search for properties
     * @param {number} id Travel Agent identification number
     * @param {PropertySearchFilterRequest} propertySearchFilterRequest Request body for PropertySearchFilterRequest object in JSON format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchUsingPOST: async (
      id: number,
      propertySearchFilterRequest: PropertySearchFilterRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("searchUsingPOST", "id", id);
      // verify required parameter 'propertySearchFilterRequest' is not null or undefined
      assertParamExists(
        "searchUsingPOST",
        "propertySearchFilterRequest",
        propertySearchFilterRequest
      );
      const localVarPath = `/api/external/v2/travelAgents/{id}/search`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication API KEY required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-KEY",
        configuration
      );

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        propertySearchFilterRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * SearchAccommodationApi - functional programming interface
 * @export
 */
export const SearchAccommodationApiFp = function (
  configuration?: Configuration
) {
  const localVarAxiosParamCreator =
    SearchAccommodationApiAxiosParamCreator(configuration);
  return {
    /**
     * This endpoint return all filters for searching accommodation. The response will include list of filters divided by different categories like property types, property amenities, room types etc. For example for property types it will return all property type related filters like Hotel, Hostel, Motel etc. If you want to filter you need to use codes for all filters. For exampleif you want to filter by Hotel you need to use \'HOTEL\' which is the code for Hotel. Each filter has code in the response
     * @summary Get filters for accommodation
     * @param {number} travelAgentId The id of the travel agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getFiltersUsingGET(
      travelAgentId: number = this.configuration.travelAgentId,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<PropertySearchFiltersResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getFiltersUsingGET(
          travelAgentId,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["SearchAccommodationApi.getFiltersUsingGET"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * This endpoint allows clients to search for available dates for properties based on a travel agent id, a comma-separated list of property IDs, and a date range. The date range should fall within the same month. For instance, if \'start\' is \'2023-01-01\', then \'end\' can be any date up to \'2023-01-31\'. If \'start\' or \'end\' dates are not provided, the response will include only the first available date of the property. Due to potential performance complications, currently the \'propertyIds\' parameter supports only one property id at a time.
     * @summary Retrieve available dates for properties within a specific month
     * @param {number} travelAgentId Travel Agent identification number
     * @param {string} propertyIds Comma-separated list of property ids
     * @param {string} start Start date for checking availability in yyyy-MM-dd format
     * @param {string} end End date for checking availability in yyyy-MM-dd format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async retrievePropertyAvailableDatesUsingGET(
      travelAgentId: number = this.configuration.travelAgentId,
      propertyIds: string,
      start: string,
      end: string,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<PropertyAvailableDatesResponse>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.retrievePropertyAvailableDatesUsingGET(
          travelAgentId,
          propertyIds,
          start,
          end,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "SearchAccommodationApi.retrievePropertyAvailableDatesUsingGET"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * This endpoint serves as an intermediate step between the initial property search (`/api/external/v2/travelAgents/{id}/search`) and the final step - creating a booking. Its primary goal is to provide availability and precise pricing information for a selected room combination. Each \'booked room\' corresponds to a booking room object, detailing room ID, occupants, dates, and any optional allotment room ID. If multiple rooms have identical configurations (room ID, occupants, dates, allotment room ID and breakfast or not), then the \'quantity\' attribute can be utilized to indicate the number of such rooms instead of repeating the details.However, distinct configurations should be represented as separate booking room objects with \'quantity\' set to 1 The response provides room prices, extra bed prices if required for accommodation, and breakfast prices (if available). The response displays the room and extra bed prices, both separately and as a combined total. It also provides information about the breakfast price, allowing users to decide later if they\'d like to include it, and if they choose it and is available, you can see \'totalPriceWithBreakfast\'. There are two total prices, one without breakfast and one with breakfast, because there is no need for separate requests only if the breakfast is changed. For the subsequent booking request, ensure the response from this endpoint, alongside its reference, is passed unchanged. This ensures no booking occurs at a modified price.
     * @summary Retrieve detailed availability and pricing information for selected room combination
     * @param {number} travelAgentId Travel Agent identification number
     * @param {PropertyRatesRequest} request Request body containing details of the selected room combinations.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async searchPropertyRatesUsingPOST(
      travelAgentId: number = this.configuration.travelAgentId,
      request: PropertyRatesRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<PropertyRatesResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.searchPropertyRatesUsingPOST(
          travelAgentId,
          request,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "SearchAccommodationApi.searchPropertyRatesUsingPOST"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * <b> This is what we call the initial search and it is usually the starting point of creating a booking. </b> <br /> This endpoint allows travel agents to search for properties based on various search criteria. <br /> <br /> Users can search for properties using any combination of the following criteria: <ul>    <li>By providing coordinates of the place, the response will only return the properties that are located in that specific area.</li>    <li>By providing a city name or location address, the response will only return the properties that are located there.</li>    <li>By providing the name of a specific property, the response will return results exclusively for that particular property.</li>    <li>By providing property IDs, the response will return a list of properties based on the ID/s sent.</li>    <li>To obtain availability and price information, users must provide exact booking check-in and check-out dates. </li>    <li>Users can specify the number of rooms and number of occupants per room to filter results. If none are specified, \'1\' is the default value for both.</li>    <li>Users can search by property and room types, and specify amenities and different features for both of them.</li>    <li>        By default, the response will only return a list of properties with whom the travel agent has a cooperation. However, the travel agent can        choose to search for properties with whom they do not have a cooperation in order to make one        that is of their interest. For these properties, the travel agent will only receive property details, and not availability and price        information.    </li>    <li>Users can choose to receive a response with a restricted number of properties that include prices, allowing for faster search results. All    the remaining properties will be without prices.</li> </ul> <br /> <p>    The result presented to the user is a list of properties with a defined availability, prices, and details related to each of the properties and their rooms individually.    <br />    The list includes: </p><ul>    <li>Fully available properties, which means that the property meets all conditions specified in the mentioned filter settings.</li>    <li>        Partially available properties, which means that the property doesn\'t have the exact capacity to accommodate all guests, doesn\'t have the        right room availability, or has lower availability than needed for some dates. In this case,        the property level availability is not full, but the user can see which available rooms fit their purpose.    </li>    <li>Properties that may not be available given the search criteria.</li> </ul> <p>If the check-in and check-out dates are not provided, but the \'minPrices\' flag is set to true,    the response will include the minimum price available for the rooms and the properties for a period of the next 365 days.    However, if the \'minPrices\' flag is false or omitted, the response will only include a list of properties with their details, but without availability and prices. </p>
     * @summary Search for properties
     * @param {number} id Travel Agent identification number
     * @param {PropertySearchFilterRequest} propertySearchFilterRequest Request body for PropertySearchFilterRequest object in JSON format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async searchUsingPOST(
      id: number,
      propertySearchFilterRequest: PropertySearchFilterRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<PropertySearchResponse>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.searchUsingPOST(
        id,
        propertySearchFilterRequest,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["SearchAccommodationApi.searchUsingPOST"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * SearchAccommodationApi - factory interface
 * @export
 */
export const SearchAccommodationApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = SearchAccommodationApiFp(configuration);
  return {
    /**
     * This endpoint return all filters for searching accommodation. The response will include list of filters divided by different categories like property types, property amenities, room types etc. For example for property types it will return all property type related filters like Hotel, Hostel, Motel etc. If you want to filter you need to use codes for all filters. For exampleif you want to filter by Hotel you need to use \'HOTEL\' which is the code for Hotel. Each filter has code in the response
     * @summary Get filters for accommodation
     * @param {number} travelAgentId The id of the travel agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFiltersUsingGET(
      travelAgentId: number = this.configuration.travelAgentId,
      options?: any
    ): AxiosPromise<PropertySearchFiltersResponse> {
      return localVarFp
        .getFiltersUsingGET(travelAgentId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * This endpoint allows clients to search for available dates for properties based on a travel agent id, a comma-separated list of property IDs, and a date range. The date range should fall within the same month. For instance, if \'start\' is \'2023-01-01\', then \'end\' can be any date up to \'2023-01-31\'. If \'start\' or \'end\' dates are not provided, the response will include only the first available date of the property. Due to potential performance complications, currently the \'propertyIds\' parameter supports only one property id at a time.
     * @summary Retrieve available dates for properties within a specific month
     * @param {number} travelAgentId Travel Agent identification number
     * @param {string} propertyIds Comma-separated list of property ids
     * @param {string} start Start date for checking availability in yyyy-MM-dd format
     * @param {string} end End date for checking availability in yyyy-MM-dd format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrievePropertyAvailableDatesUsingGET(
      travelAgentId: number = this.configuration.travelAgentId,
      propertyIds: string,
      start: string,
      end: string,
      options?: any
    ): AxiosPromise<Array<PropertyAvailableDatesResponse>> {
      return localVarFp
        .retrievePropertyAvailableDatesUsingGET(
          travelAgentId,
          propertyIds,
          start,
          end,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * This endpoint serves as an intermediate step between the initial property search (`/api/external/v2/travelAgents/{id}/search`) and the final step - creating a booking. Its primary goal is to provide availability and precise pricing information for a selected room combination. Each \'booked room\' corresponds to a booking room object, detailing room ID, occupants, dates, and any optional allotment room ID. If multiple rooms have identical configurations (room ID, occupants, dates, allotment room ID and breakfast or not), then the \'quantity\' attribute can be utilized to indicate the number of such rooms instead of repeating the details.However, distinct configurations should be represented as separate booking room objects with \'quantity\' set to 1 The response provides room prices, extra bed prices if required for accommodation, and breakfast prices (if available). The response displays the room and extra bed prices, both separately and as a combined total. It also provides information about the breakfast price, allowing users to decide later if they\'d like to include it, and if they choose it and is available, you can see \'totalPriceWithBreakfast\'. There are two total prices, one without breakfast and one with breakfast, because there is no need for separate requests only if the breakfast is changed. For the subsequent booking request, ensure the response from this endpoint, alongside its reference, is passed unchanged. This ensures no booking occurs at a modified price.
     * @summary Retrieve detailed availability and pricing information for selected room combination
     * @param {number} travelAgentId Travel Agent identification number
     * @param {PropertyRatesRequest} request Request body containing details of the selected room combinations.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchPropertyRatesUsingPOST(
      travelAgentId: number = this.configuration.travelAgentId,
      request: PropertyRatesRequest,
      options?: any
    ): AxiosPromise<PropertyRatesResponse> {
      return localVarFp
        .searchPropertyRatesUsingPOST(travelAgentId, request, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * <b> This is what we call the initial search and it is usually the starting point of creating a booking. </b> <br /> This endpoint allows travel agents to search for properties based on various search criteria. <br /> <br /> Users can search for properties using any combination of the following criteria: <ul>    <li>By providing coordinates of the place, the response will only return the properties that are located in that specific area.</li>    <li>By providing a city name or location address, the response will only return the properties that are located there.</li>    <li>By providing the name of a specific property, the response will return results exclusively for that particular property.</li>    <li>By providing property IDs, the response will return a list of properties based on the ID/s sent.</li>    <li>To obtain availability and price information, users must provide exact booking check-in and check-out dates. </li>    <li>Users can specify the number of rooms and number of occupants per room to filter results. If none are specified, \'1\' is the default value for both.</li>    <li>Users can search by property and room types, and specify amenities and different features for both of them.</li>    <li>        By default, the response will only return a list of properties with whom the travel agent has a cooperation. However, the travel agent can        choose to search for properties with whom they do not have a cooperation in order to make one        that is of their interest. For these properties, the travel agent will only receive property details, and not availability and price        information.    </li>    <li>Users can choose to receive a response with a restricted number of properties that include prices, allowing for faster search results. All    the remaining properties will be without prices.</li> </ul> <br /> <p>    The result presented to the user is a list of properties with a defined availability, prices, and details related to each of the properties and their rooms individually.    <br />    The list includes: </p><ul>    <li>Fully available properties, which means that the property meets all conditions specified in the mentioned filter settings.</li>    <li>        Partially available properties, which means that the property doesn\'t have the exact capacity to accommodate all guests, doesn\'t have the        right room availability, or has lower availability than needed for some dates. In this case,        the property level availability is not full, but the user can see which available rooms fit their purpose.    </li>    <li>Properties that may not be available given the search criteria.</li> </ul> <p>If the check-in and check-out dates are not provided, but the \'minPrices\' flag is set to true,    the response will include the minimum price available for the rooms and the properties for a period of the next 365 days.    However, if the \'minPrices\' flag is false or omitted, the response will only include a list of properties with their details, but without availability and prices. </p>
     * @summary Search for properties
     * @param {number} id Travel Agent identification number
     * @param {PropertySearchFilterRequest} propertySearchFilterRequest Request body for PropertySearchFilterRequest object in JSON format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchUsingPOST(
      id: number,
      propertySearchFilterRequest: PropertySearchFilterRequest,
      options?: any
    ): AxiosPromise<Array<PropertySearchResponse>> {
      return localVarFp
        .searchUsingPOST(id, propertySearchFilterRequest, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * SearchAccommodationApi - object-oriented interface
 * @export
 * @class SearchAccommodationApi
 * @extends {BaseAPI}
 */
export class SearchAccommodationApi extends BaseAPI {
  /**
   * This endpoint return all filters for searching accommodation. The response will include list of filters divided by different categories like property types, property amenities, room types etc. For example for property types it will return all property type related filters like Hotel, Hostel, Motel etc. If you want to filter you need to use codes for all filters. For exampleif you want to filter by Hotel you need to use \'HOTEL\' which is the code for Hotel. Each filter has code in the response
   * @summary Get filters for accommodation
   * @param {number} travelAgentId The id of the travel agent
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SearchAccommodationApi
   */
  public getFiltersUsingGET(
    travelAgentId: number = this.configuration.travelAgentId,
    options?: RawAxiosRequestConfig
  ) {
    return SearchAccommodationApiFp(this.configuration)
      .getFiltersUsingGET(travelAgentId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * This endpoint allows clients to search for available dates for properties based on a travel agent id, a comma-separated list of property IDs, and a date range. The date range should fall within the same month. For instance, if \'start\' is \'2023-01-01\', then \'end\' can be any date up to \'2023-01-31\'. If \'start\' or \'end\' dates are not provided, the response will include only the first available date of the property. Due to potential performance complications, currently the \'propertyIds\' parameter supports only one property id at a time.
   * @summary Retrieve available dates for properties within a specific month
   * @param {number} travelAgentId Travel Agent identification number
   * @param {string} propertyIds Comma-separated list of property ids
   * @param {string} start Start date for checking availability in yyyy-MM-dd format
   * @param {string} end End date for checking availability in yyyy-MM-dd format
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SearchAccommodationApi
   */
  public retrievePropertyAvailableDatesUsingGET(
    propertyIds: string,
    start: string,
    end: string,
    options?: RawAxiosRequestConfig
  ) {
    return SearchAccommodationApiFp(this.configuration)
      .retrievePropertyAvailableDatesUsingGET(
        this.configuration.travelAgentId,
        propertyIds,
        start,
        end,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * This endpoint serves as an intermediate step between the initial property search (`/api/external/v2/travelAgents/{id}/search`) and the final step - creating a booking. Its primary goal is to provide availability and precise pricing information for a selected room combination. Each \'booked room\' corresponds to a booking room object, detailing room ID, occupants, dates, and any optional allotment room ID. If multiple rooms have identical configurations (room ID, occupants, dates, allotment room ID and breakfast or not), then the \'quantity\' attribute can be utilized to indicate the number of such rooms instead of repeating the details.However, distinct configurations should be represented as separate booking room objects with \'quantity\' set to 1 The response provides room prices, extra bed prices if required for accommodation, and breakfast prices (if available). The response displays the room and extra bed prices, both separately and as a combined total. It also provides information about the breakfast price, allowing users to decide later if they\'d like to include it, and if they choose it and is available, you can see \'totalPriceWithBreakfast\'. There are two total prices, one without breakfast and one with breakfast, because there is no need for separate requests only if the breakfast is changed. For the subsequent booking request, ensure the response from this endpoint, alongside its reference, is passed unchanged. This ensures no booking occurs at a modified price.
   * @summary Retrieve detailed availability and pricing information for selected room combination
   * @param {number} travelAgentId Travel Agent identification number
   * @param {PropertyRatesRequest} request Request body containing details of the selected room combinations.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SearchAccommodationApi
   */
  public searchPropertyRatesUsingPOST(
    request: PropertyRatesRequest,
    options?: RawAxiosRequestConfig
  ) {
    return SearchAccommodationApiFp(this.configuration)
      .searchPropertyRatesUsingPOST(
        this.configuration.travelAgentId,
        request,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * <b> This is what we call the initial search and it is usually the starting point of creating a booking. </b> <br /> This endpoint allows travel agents to search for properties based on various search criteria. <br /> <br /> Users can search for properties using any combination of the following criteria: <ul>    <li>By providing coordinates of the place, the response will only return the properties that are located in that specific area.</li>    <li>By providing a city name or location address, the response will only return the properties that are located there.</li>    <li>By providing the name of a specific property, the response will return results exclusively for that particular property.</li>    <li>By providing property IDs, the response will return a list of properties based on the ID/s sent.</li>    <li>To obtain availability and price information, users must provide exact booking check-in and check-out dates. </li>    <li>Users can specify the number of rooms and number of occupants per room to filter results. If none are specified, \'1\' is the default value for both.</li>    <li>Users can search by property and room types, and specify amenities and different features for both of them.</li>    <li>        By default, the response will only return a list of properties with whom the travel agent has a cooperation. However, the travel agent can        choose to search for properties with whom they do not have a cooperation in order to make one        that is of their interest. For these properties, the travel agent will only receive property details, and not availability and price        information.    </li>    <li>Users can choose to receive a response with a restricted number of properties that include prices, allowing for faster search results. All    the remaining properties will be without prices.</li> </ul> <br /> <p>    The result presented to the user is a list of properties with a defined availability, prices, and details related to each of the properties and their rooms individually.    <br />    The list includes: </p><ul>    <li>Fully available properties, which means that the property meets all conditions specified in the mentioned filter settings.</li>    <li>        Partially available properties, which means that the property doesn\'t have the exact capacity to accommodate all guests, doesn\'t have the        right room availability, or has lower availability than needed for some dates. In this case,        the property level availability is not full, but the user can see which available rooms fit their purpose.    </li>    <li>Properties that may not be available given the search criteria.</li> </ul> <p>If the check-in and check-out dates are not provided, but the \'minPrices\' flag is set to true,    the response will include the minimum price available for the rooms and the properties for a period of the next 365 days.    However, if the \'minPrices\' flag is false or omitted, the response will only include a list of properties with their details, but without availability and prices. </p>
   * @summary Search for properties
   * @param {number} id Travel Agent identification number
   * @param {PropertySearchFilterRequest} propertySearchFilterRequest Request body for PropertySearchFilterRequest object in JSON format
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SearchAccommodationApi
   */
  public searchUsingPOST(
    propertySearchFilterRequest: PropertySearchFilterRequest,
    options?: RawAxiosRequestConfig
  ) {
    return SearchAccommodationApiFp(this.configuration)
      .searchUsingPOST(
        this.configuration.travelAgentId,
        propertySearchFilterRequest,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * SearchCarRentalApi - axios parameter creator
 * @export
 */
export const SearchCarRentalApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * <p>   This endpoint provides a comprehensive list of filters for car rental searches,    organized by various categories such as type, transmission,    fuel, and more.    For instance, under the transmission category, you will find filters for    specific transmission types like \'Manual 4WD\' and \'Auto 4WD\'.</p>  <p>   To apply filters in a search, use the corresponding codes provided for each filter.    For example, to filter vehicles that accommodate 6 or more passengers, use the code \'LARGE\',    which represents the \'6+ Passengers\' filter.    Each filter in the response is accompanied by its unique code, enabling precise and    customizable search capabilities. </p>
     * @summary Retrieve Car Rental Filters
     * @param {number} travelAgentId The ID of the travel agency
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFiltersUsingGET: async (
      travelAgentId: number = this.configuration.travelAgentId,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'travelAgentId' is not null or undefined
      assertParamExists("getFiltersUsingGET", "travelAgentId", travelAgentId);
      const localVarPath =
        `/api/external/v2/travelAgents/{travelAgentId}/car-rentals/search/filters`.replace(
          `{${"travelAgentId"}}`,
          encodeURIComponent(String(travelAgentId))
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication API KEY required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-KEY",
        configuration
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * <p>   This endpoint allows searching for rental cars based on various criteria defined in the request body.    Age and residence country of the driver must be inputted, as well as pick up and drop off location    and time details.    The response will include a list of available vehicles, each with vehicle info, a list of packages,    and pricing details in travel agent currency.</p>  <p>   A suitable vehicle and package should be chosen to proceed with the booking.    Each package has a reference number, inclusions if available, extras that can be chosen,    and coverage options that can be booked on site.</p>  <p>   We cannot decide which package you should choose. If it\'s not the end user deciding on the package,    we suggest using the first package, which is the default.</p>  <p>   Additionally, each vehicle will have a specified pick up and drop off branch identified by their    respective ids.    The branches\' details will be provided in a separate list within the same response.</p>  <p>   If you prefer not to receive all the fields in the response, you can utilize \'fieldsToInclude\'    in the request body to specify which information you want included.</p>  <p>   Additionally, the search results can be refined using various optional filters like categories,    types, transmission types, fuel types, and passenger capacity groups, enabling users to find vehicles    that meet specific requirements more effectively.</p>  <p>   What\'s next? Use the <b>Create a booking</b> endpoint to create a booking.</p>
     * @summary Search for Rental Cars
     * @param {number} travelAgentId The ID of the travel agency
     * @param {CarRentalSearchRequest} carRentalSearchRequest Request body for CarRentalSearchRequest object in JSON format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchCarsUsingPOST: async (
      travelAgentId: number = this.configuration.travelAgentId,
      carRentalSearchRequest: CarRentalSearchRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'travelAgentId' is not null or undefined
      assertParamExists("searchCarsUsingPOST", "travelAgentId", travelAgentId);
      // verify required parameter 'carRentalSearchRequest' is not null or undefined
      assertParamExists(
        "searchCarsUsingPOST",
        "carRentalSearchRequest",
        carRentalSearchRequest
      );
      const localVarPath =
        `/api/external/v2/travelAgents/{travelAgentId}/car-rentals/search`.replace(
          `{${"travelAgentId"}}`,
          encodeURIComponent(String(travelAgentId))
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication API KEY required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-KEY",
        configuration
      );

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        carRentalSearchRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * SearchCarRentalApi - functional programming interface
 * @export
 */
export const SearchCarRentalApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    SearchCarRentalApiAxiosParamCreator(configuration);
  return {
    /**
     * <p>   This endpoint provides a comprehensive list of filters for car rental searches,    organized by various categories such as type, transmission,    fuel, and more.    For instance, under the transmission category, you will find filters for    specific transmission types like \'Manual 4WD\' and \'Auto 4WD\'.</p>  <p>   To apply filters in a search, use the corresponding codes provided for each filter.    For example, to filter vehicles that accommodate 6 or more passengers, use the code \'LARGE\',    which represents the \'6+ Passengers\' filter.    Each filter in the response is accompanied by its unique code, enabling precise and    customizable search capabilities. </p>
     * @summary Retrieve Car Rental Filters
     * @param {number} travelAgentId The ID of the travel agency
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getFiltersUsingGET(
      travelAgentId: number = this.configuration.travelAgentId,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<CarRentalSearchFiltersResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getFiltersUsingGET(
          travelAgentId,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["SearchCarRentalApi.getFiltersUsingGET"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * <p>   This endpoint allows searching for rental cars based on various criteria defined in the request body.    Age and residence country of the driver must be inputted, as well as pick up and drop off location    and time details.    The response will include a list of available vehicles, each with vehicle info, a list of packages,    and pricing details in travel agent currency.</p>  <p>   A suitable vehicle and package should be chosen to proceed with the booking.    Each package has a reference number, inclusions if available, extras that can be chosen,    and coverage options that can be booked on site.</p>  <p>   We cannot decide which package you should choose. If it\'s not the end user deciding on the package,    we suggest using the first package, which is the default.</p>  <p>   Additionally, each vehicle will have a specified pick up and drop off branch identified by their    respective ids.    The branches\' details will be provided in a separate list within the same response.</p>  <p>   If you prefer not to receive all the fields in the response, you can utilize \'fieldsToInclude\'    in the request body to specify which information you want included.</p>  <p>   Additionally, the search results can be refined using various optional filters like categories,    types, transmission types, fuel types, and passenger capacity groups, enabling users to find vehicles    that meet specific requirements more effectively.</p>  <p>   What\'s next? Use the <b>Create a booking</b> endpoint to create a booking.</p>
     * @summary Search for Rental Cars
     * @param {number} travelAgentId The ID of the travel agency
     * @param {CarRentalSearchRequest} carRentalSearchRequest Request body for CarRentalSearchRequest object in JSON format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async searchCarsUsingPOST(
      travelAgentId: number = this.configuration.travelAgentId,
      carRentalSearchRequest: CarRentalSearchRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<CarRentalSearchResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.searchCarsUsingPOST(
          travelAgentId,
          carRentalSearchRequest,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["SearchCarRentalApi.searchCarsUsingPOST"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * SearchCarRentalApi - factory interface
 * @export
 */
export const SearchCarRentalApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = SearchCarRentalApiFp(configuration);
  return {
    /**
     * <p>   This endpoint provides a comprehensive list of filters for car rental searches,    organized by various categories such as type, transmission,    fuel, and more.    For instance, under the transmission category, you will find filters for    specific transmission types like \'Manual 4WD\' and \'Auto 4WD\'.</p>  <p>   To apply filters in a search, use the corresponding codes provided for each filter.    For example, to filter vehicles that accommodate 6 or more passengers, use the code \'LARGE\',    which represents the \'6+ Passengers\' filter.    Each filter in the response is accompanied by its unique code, enabling precise and    customizable search capabilities. </p>
     * @summary Retrieve Car Rental Filters
     * @param {number} travelAgentId The ID of the travel agency
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFiltersUsingGET(
      travelAgentId: number = this.configuration.travelAgentId,
      options?: any
    ): AxiosPromise<CarRentalSearchFiltersResponse> {
      return localVarFp
        .getFiltersUsingGET(travelAgentId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * <p>   This endpoint allows searching for rental cars based on various criteria defined in the request body.    Age and residence country of the driver must be inputted, as well as pick up and drop off location    and time details.    The response will include a list of available vehicles, each with vehicle info, a list of packages,    and pricing details in travel agent currency.</p>  <p>   A suitable vehicle and package should be chosen to proceed with the booking.    Each package has a reference number, inclusions if available, extras that can be chosen,    and coverage options that can be booked on site.</p>  <p>   We cannot decide which package you should choose. If it\'s not the end user deciding on the package,    we suggest using the first package, which is the default.</p>  <p>   Additionally, each vehicle will have a specified pick up and drop off branch identified by their    respective ids.    The branches\' details will be provided in a separate list within the same response.</p>  <p>   If you prefer not to receive all the fields in the response, you can utilize \'fieldsToInclude\'    in the request body to specify which information you want included.</p>  <p>   Additionally, the search results can be refined using various optional filters like categories,    types, transmission types, fuel types, and passenger capacity groups, enabling users to find vehicles    that meet specific requirements more effectively.</p>  <p>   What\'s next? Use the <b>Create a booking</b> endpoint to create a booking.</p>
     * @summary Search for Rental Cars
     * @param {number} travelAgentId The ID of the travel agency
     * @param {CarRentalSearchRequest} carRentalSearchRequest Request body for CarRentalSearchRequest object in JSON format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchCarsUsingPOST(
      travelAgentId: number = this.configuration.travelAgentId,
      carRentalSearchRequest: CarRentalSearchRequest,
      options?: any
    ): AxiosPromise<CarRentalSearchResponse> {
      return localVarFp
        .searchCarsUsingPOST(travelAgentId, carRentalSearchRequest, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * SearchCarRentalApi - object-oriented interface
 * @export
 * @class SearchCarRentalApi
 * @extends {BaseAPI}
 */
export class SearchCarRentalApi extends BaseAPI {
  /**
   * <p>   This endpoint provides a comprehensive list of filters for car rental searches,    organized by various categories such as type, transmission,    fuel, and more.    For instance, under the transmission category, you will find filters for    specific transmission types like \'Manual 4WD\' and \'Auto 4WD\'.</p>  <p>   To apply filters in a search, use the corresponding codes provided for each filter.    For example, to filter vehicles that accommodate 6 or more passengers, use the code \'LARGE\',    which represents the \'6+ Passengers\' filter.    Each filter in the response is accompanied by its unique code, enabling precise and    customizable search capabilities. </p>
   * @summary Retrieve Car Rental Filters
   * @param {number} travelAgentId The ID of the travel agency
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SearchCarRentalApi
   */
  public getFiltersUsingGET(options?: RawAxiosRequestConfig) {
    return SearchCarRentalApiFp(this.configuration)
      .getFiltersUsingGET(this.configuration.travelAgentId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * <p>   This endpoint allows searching for rental cars based on various criteria defined in the request body.    Age and residence country of the driver must be inputted, as well as pick up and drop off location    and time details.    The response will include a list of available vehicles, each with vehicle info, a list of packages,    and pricing details in travel agent currency.</p>  <p>   A suitable vehicle and package should be chosen to proceed with the booking.    Each package has a reference number, inclusions if available, extras that can be chosen,    and coverage options that can be booked on site.</p>  <p>   We cannot decide which package you should choose. If it\'s not the end user deciding on the package,    we suggest using the first package, which is the default.</p>  <p>   Additionally, each vehicle will have a specified pick up and drop off branch identified by their    respective ids.    The branches\' details will be provided in a separate list within the same response.</p>  <p>   If you prefer not to receive all the fields in the response, you can utilize \'fieldsToInclude\'    in the request body to specify which information you want included.</p>  <p>   Additionally, the search results can be refined using various optional filters like categories,    types, transmission types, fuel types, and passenger capacity groups, enabling users to find vehicles    that meet specific requirements more effectively.</p>  <p>   What\'s next? Use the <b>Create a booking</b> endpoint to create a booking.</p>
   * @summary Search for Rental Cars
   * @param {number} travelAgentId The ID of the travel agency
   * @param {CarRentalSearchRequest} carRentalSearchRequest Request body for CarRentalSearchRequest object in JSON format
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SearchCarRentalApi
   */
  public searchCarsUsingPOST(
    carRentalSearchRequest: CarRentalSearchRequest,
    options?: RawAxiosRequestConfig
  ) {
    return SearchCarRentalApiFp(this.configuration)
      .searchCarsUsingPOST(
        this.configuration.travelAgentId,
        carRentalSearchRequest,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * UpdateABookingApi - axios parameter creator
 * @export
 */
export const UpdateABookingApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * Travel Agent identification number and Booking identification number are needed as path variables.<br/>The travel agent can update the names of the occupants in the booked rooms on booking level. In case the travel agent is not related to the specific booking, an appropriate error message will be displayed.
     * @summary Update booking room names
     * @param {number} travelAgentId Travel Agent identification number
     * @param {number} id Booking identification number
     * @param {Array<BookingRoomNameUpdateRequest>} bookingRoomNameUpdateRequests Request body for a List of BookingRoomNameUpdateRequest objects in JSON format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTravelAgentBookingNameListUsingPOST: async (
      travelAgentId: number = this.configuration.travelAgentId,
      id: number,
      bookingRoomNameUpdateRequests: Array<BookingRoomNameUpdateRequest>,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'travelAgentId' is not null or undefined
      assertParamExists(
        "updateTravelAgentBookingNameListUsingPOST",
        "travelAgentId",
        travelAgentId
      );
      // verify required parameter 'id' is not null or undefined
      assertParamExists("updateTravelAgentBookingNameListUsingPOST", "id", id);
      // verify required parameter 'bookingRoomNameUpdateRequests' is not null or undefined
      assertParamExists(
        "updateTravelAgentBookingNameListUsingPOST",
        "bookingRoomNameUpdateRequests",
        bookingRoomNameUpdateRequests
      );
      const localVarPath =
        `/api/external/v2/travelAgents/{travelAgentId}/bookings/{id}/nameList`
          .replace(
            `{${"travelAgentId"}}`,
            encodeURIComponent(String(travelAgentId))
          )
          .replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication API KEY required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-KEY",
        configuration
      );

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        bookingRoomNameUpdateRequests,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Travel agent identification number and booking identification number are needed as path variables.<br/>The travel agent is able to modify the booking only if the booking is still valid meaning the check out date is after the current date. <br/>The status of the booking, quantity and other general booking info like name,country,voucher number and notes can be updated from the travel agent. Also the properties of the booking rooms such as quantity,pax and the dates can be updated.<br/>After the changes are saved, a notification email is sent to both the property and the travel agency. <br/>In case the booking is not editable or it is not related to the travel agent, an appropriate error message will be presented.<br/>The required fields for the BookingRoomDTO are: id, roomName, pax, quantity, startDate and endDate.
     * @summary Update a booking
     * @param {number} travelAgentId Travel Agent identification number
     * @param {number} id Booking identification number
     * @param {BookingUpdateRequest} bookingUpdateRequest Request body for BookingUpdateRequest object in JSON format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTravelAgentBookingUsingPUT: async (
      travelAgentId: number = this.configuration.travelAgentId,
      id: number,
      bookingUpdateRequest: BookingUpdateRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'travelAgentId' is not null or undefined
      assertParamExists(
        "updateTravelAgentBookingUsingPUT",
        "travelAgentId",
        travelAgentId
      );
      // verify required parameter 'id' is not null or undefined
      assertParamExists("updateTravelAgentBookingUsingPUT", "id", id);
      // verify required parameter 'bookingUpdateRequest' is not null or undefined
      assertParamExists(
        "updateTravelAgentBookingUsingPUT",
        "bookingUpdateRequest",
        bookingUpdateRequest
      );
      const localVarPath =
        `/api/external/v2/travelAgents/{travelAgentId}/bookings/{id}`
          .replace(
            `{${"travelAgentId"}}`,
            encodeURIComponent(String(travelAgentId))
          )
          .replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication API KEY required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-KEY",
        configuration
      );

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        bookingUpdateRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * UpdateABookingApi - functional programming interface
 * @export
 */
export const UpdateABookingApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    UpdateABookingApiAxiosParamCreator(configuration);
  return {
    /**
     * Travel Agent identification number and Booking identification number are needed as path variables.<br/>The travel agent can update the names of the occupants in the booked rooms on booking level. In case the travel agent is not related to the specific booking, an appropriate error message will be displayed.
     * @summary Update booking room names
     * @param {number} travelAgentId Travel Agent identification number
     * @param {number} id Booking identification number
     * @param {Array<BookingRoomNameUpdateRequest>} bookingRoomNameUpdateRequests Request body for a List of BookingRoomNameUpdateRequest objects in JSON format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateTravelAgentBookingNameListUsingPOST(
      travelAgentId: number = this.configuration.travelAgentId,
      id: number,
      bookingRoomNameUpdateRequests: Array<BookingRoomNameUpdateRequest>,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.updateTravelAgentBookingNameListUsingPOST(
          travelAgentId,
          id,
          bookingRoomNameUpdateRequests,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "UpdateABookingApi.updateTravelAgentBookingNameListUsingPOST"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Travel agent identification number and booking identification number are needed as path variables.<br/>The travel agent is able to modify the booking only if the booking is still valid meaning the check out date is after the current date. <br/>The status of the booking, quantity and other general booking info like name,country,voucher number and notes can be updated from the travel agent. Also the properties of the booking rooms such as quantity,pax and the dates can be updated.<br/>After the changes are saved, a notification email is sent to both the property and the travel agency. <br/>In case the booking is not editable or it is not related to the travel agent, an appropriate error message will be presented.<br/>The required fields for the BookingRoomDTO are: id, roomName, pax, quantity, startDate and endDate.
     * @summary Update a booking
     * @param {number} travelAgentId Travel Agent identification number
     * @param {number} id Booking identification number
     * @param {BookingUpdateRequest} bookingUpdateRequest Request body for BookingUpdateRequest object in JSON format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateTravelAgentBookingUsingPUT(
      travelAgentId: number = this.configuration.travelAgentId,
      id: number,
      bookingUpdateRequest: BookingUpdateRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<BookingResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.updateTravelAgentBookingUsingPUT(
          travelAgentId,
          id,
          bookingUpdateRequest,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "UpdateABookingApi.updateTravelAgentBookingUsingPUT"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * UpdateABookingApi - factory interface
 * @export
 */
export const UpdateABookingApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = UpdateABookingApiFp(configuration);
  return {
    /**
     * Travel Agent identification number and Booking identification number are needed as path variables.<br/>The travel agent can update the names of the occupants in the booked rooms on booking level. In case the travel agent is not related to the specific booking, an appropriate error message will be displayed.
     * @summary Update booking room names
     * @param {number} travelAgentId Travel Agent identification number
     * @param {number} id Booking identification number
     * @param {Array<BookingRoomNameUpdateRequest>} bookingRoomNameUpdateRequests Request body for a List of BookingRoomNameUpdateRequest objects in JSON format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTravelAgentBookingNameListUsingPOST(
      travelAgentId: number = this.configuration.travelAgentId,
      id: number,
      bookingRoomNameUpdateRequests: Array<BookingRoomNameUpdateRequest>,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .updateTravelAgentBookingNameListUsingPOST(
          travelAgentId,
          id,
          bookingRoomNameUpdateRequests,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * Travel agent identification number and booking identification number are needed as path variables.<br/>The travel agent is able to modify the booking only if the booking is still valid meaning the check out date is after the current date. <br/>The status of the booking, quantity and other general booking info like name,country,voucher number and notes can be updated from the travel agent. Also the properties of the booking rooms such as quantity,pax and the dates can be updated.<br/>After the changes are saved, a notification email is sent to both the property and the travel agency. <br/>In case the booking is not editable or it is not related to the travel agent, an appropriate error message will be presented.<br/>The required fields for the BookingRoomDTO are: id, roomName, pax, quantity, startDate and endDate.
     * @summary Update a booking
     * @param {number} travelAgentId Travel Agent identification number
     * @param {number} id Booking identification number
     * @param {BookingUpdateRequest} bookingUpdateRequest Request body for BookingUpdateRequest object in JSON format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTravelAgentBookingUsingPUT(
      travelAgentId: number = this.configuration.travelAgentId,
      id: number,
      bookingUpdateRequest: BookingUpdateRequest,
      options?: any
    ): AxiosPromise<BookingResponse> {
      return localVarFp
        .updateTravelAgentBookingUsingPUT(
          travelAgentId,
          id,
          bookingUpdateRequest,
          options
        )
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * UpdateABookingApi - object-oriented interface
 * @export
 * @class UpdateABookingApi
 * @extends {BaseAPI}
 */
export class UpdateABookingApi extends BaseAPI {
  /**
   * Travel Agent identification number and Booking identification number are needed as path variables.<br/>The travel agent can update the names of the occupants in the booked rooms on booking level. In case the travel agent is not related to the specific booking, an appropriate error message will be displayed.
   * @summary Update booking room names
   * @param {number} travelAgentId Travel Agent identification number
   * @param {number} id Booking identification number
   * @param {Array<BookingRoomNameUpdateRequest>} bookingRoomNameUpdateRequests Request body for a List of BookingRoomNameUpdateRequest objects in JSON format
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UpdateABookingApi
   */
  public updateTravelAgentBookingNameListUsingPOST(
    id: number,
    bookingRoomNameUpdateRequests: Array<BookingRoomNameUpdateRequest>,
    options?: RawAxiosRequestConfig
  ) {
    return UpdateABookingApiFp(this.configuration)
      .updateTravelAgentBookingNameListUsingPOST(
        this.configuration.travelAgentId,
        id,
        bookingRoomNameUpdateRequests,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Travel agent identification number and booking identification number are needed as path variables.<br/>The travel agent is able to modify the booking only if the booking is still valid meaning the check out date is after the current date. <br/>The status of the booking, quantity and other general booking info like name,country,voucher number and notes can be updated from the travel agent. Also the properties of the booking rooms such as quantity,pax and the dates can be updated.<br/>After the changes are saved, a notification email is sent to both the property and the travel agency. <br/>In case the booking is not editable or it is not related to the travel agent, an appropriate error message will be presented.<br/>The required fields for the BookingRoomDTO are: id, roomName, pax, quantity, startDate and endDate.
   * @summary Update a booking
   * @param {number} travelAgentId Travel Agent identification number
   * @param {number} id Booking identification number
   * @param {BookingUpdateRequest} bookingUpdateRequest Request body for BookingUpdateRequest object in JSON format
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UpdateABookingApi
   */
  public updateTravelAgentBookingUsingPUT(
    id: number,
    bookingUpdateRequest: BookingUpdateRequest,
    options?: RawAxiosRequestConfig
  ) {
    return UpdateABookingApiFp(this.configuration)
      .updateTravelAgentBookingUsingPUT(
        this.configuration.travelAgentId,
        id,
        bookingUpdateRequest,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
}
